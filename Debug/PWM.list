
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004810  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004994  08004994  00005994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049ac  080049ac  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080049ac  080049ac  000059ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b4  080049b4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b4  080049b4  000059b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049b8  080049b8  000059b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080049bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  2000000c  080049c8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  080049c8  00006600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb20  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002001  00000000  00000000  00015b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00017b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b75  00000000  00000000  000189f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6b1  00000000  00000000  00019565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001064a  00000000  00000000  00038c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c176e  00000000  00000000  00049260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a9ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc4  00000000  00000000  0010aa14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0010e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800497c 	.word	0x0800497c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	0800497c 	.word	0x0800497c

080001c4 <__aeabi_frsub>:
 80001c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80001c8:	e002      	b.n	80001d0 <__addsf3>
 80001ca:	bf00      	nop

080001cc <__aeabi_fsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080001d0 <__addsf3>:
 80001d0:	0042      	lsls	r2, r0, #1
 80001d2:	bf1f      	itttt	ne
 80001d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001d8:	ea92 0f03 	teqne	r2, r3
 80001dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001e4:	d06a      	beq.n	80002bc <__addsf3+0xec>
 80001e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001ee:	bfc1      	itttt	gt
 80001f0:	18d2      	addgt	r2, r2, r3
 80001f2:	4041      	eorgt	r1, r0
 80001f4:	4048      	eorgt	r0, r1
 80001f6:	4041      	eorgt	r1, r0
 80001f8:	bfb8      	it	lt
 80001fa:	425b      	neglt	r3, r3
 80001fc:	2b19      	cmp	r3, #25
 80001fe:	bf88      	it	hi
 8000200:	4770      	bxhi	lr
 8000202:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000206:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800020a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800020e:	bf18      	it	ne
 8000210:	4240      	negne	r0, r0
 8000212:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000216:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800021a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800021e:	bf18      	it	ne
 8000220:	4249      	negne	r1, r1
 8000222:	ea92 0f03 	teq	r2, r3
 8000226:	d03f      	beq.n	80002a8 <__addsf3+0xd8>
 8000228:	f1a2 0201 	sub.w	r2, r2, #1
 800022c:	fa41 fc03 	asr.w	ip, r1, r3
 8000230:	eb10 000c 	adds.w	r0, r0, ip
 8000234:	f1c3 0320 	rsb	r3, r3, #32
 8000238:	fa01 f103 	lsl.w	r1, r1, r3
 800023c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000240:	d502      	bpl.n	8000248 <__addsf3+0x78>
 8000242:	4249      	negs	r1, r1
 8000244:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000248:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800024c:	d313      	bcc.n	8000276 <__addsf3+0xa6>
 800024e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000252:	d306      	bcc.n	8000262 <__addsf3+0x92>
 8000254:	0840      	lsrs	r0, r0, #1
 8000256:	ea4f 0131 	mov.w	r1, r1, rrx
 800025a:	f102 0201 	add.w	r2, r2, #1
 800025e:	2afe      	cmp	r2, #254	@ 0xfe
 8000260:	d251      	bcs.n	8000306 <__addsf3+0x136>
 8000262:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000266:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026a:	bf08      	it	eq
 800026c:	f020 0001 	biceq.w	r0, r0, #1
 8000270:	ea40 0003 	orr.w	r0, r0, r3
 8000274:	4770      	bx	lr
 8000276:	0049      	lsls	r1, r1, #1
 8000278:	eb40 0000 	adc.w	r0, r0, r0
 800027c:	3a01      	subs	r2, #1
 800027e:	bf28      	it	cs
 8000280:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000284:	d2ed      	bcs.n	8000262 <__addsf3+0x92>
 8000286:	fab0 fc80 	clz	ip, r0
 800028a:	f1ac 0c08 	sub.w	ip, ip, #8
 800028e:	ebb2 020c 	subs.w	r2, r2, ip
 8000292:	fa00 f00c 	lsl.w	r0, r0, ip
 8000296:	bfaa      	itet	ge
 8000298:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800029c:	4252      	neglt	r2, r2
 800029e:	4318      	orrge	r0, r3
 80002a0:	bfbc      	itt	lt
 80002a2:	40d0      	lsrlt	r0, r2
 80002a4:	4318      	orrlt	r0, r3
 80002a6:	4770      	bx	lr
 80002a8:	f092 0f00 	teq	r2, #0
 80002ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80002b0:	bf06      	itte	eq
 80002b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80002b6:	3201      	addeq	r2, #1
 80002b8:	3b01      	subne	r3, #1
 80002ba:	e7b5      	b.n	8000228 <__addsf3+0x58>
 80002bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002c4:	bf18      	it	ne
 80002c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ca:	d021      	beq.n	8000310 <__addsf3+0x140>
 80002cc:	ea92 0f03 	teq	r2, r3
 80002d0:	d004      	beq.n	80002dc <__addsf3+0x10c>
 80002d2:	f092 0f00 	teq	r2, #0
 80002d6:	bf08      	it	eq
 80002d8:	4608      	moveq	r0, r1
 80002da:	4770      	bx	lr
 80002dc:	ea90 0f01 	teq	r0, r1
 80002e0:	bf1c      	itt	ne
 80002e2:	2000      	movne	r0, #0
 80002e4:	4770      	bxne	lr
 80002e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80002ea:	d104      	bne.n	80002f6 <__addsf3+0x126>
 80002ec:	0040      	lsls	r0, r0, #1
 80002ee:	bf28      	it	cs
 80002f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002f4:	4770      	bx	lr
 80002f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002fa:	bf3c      	itt	cc
 80002fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000300:	4770      	bxcc	lr
 8000302:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000306:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800030a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030e:	4770      	bx	lr
 8000310:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000314:	bf16      	itet	ne
 8000316:	4608      	movne	r0, r1
 8000318:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800031c:	4601      	movne	r1, r0
 800031e:	0242      	lsls	r2, r0, #9
 8000320:	bf06      	itte	eq
 8000322:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000326:	ea90 0f01 	teqeq	r0, r1
 800032a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800032e:	4770      	bx	lr

08000330 <__aeabi_ui2f>:
 8000330:	f04f 0300 	mov.w	r3, #0
 8000334:	e004      	b.n	8000340 <__aeabi_i2f+0x8>
 8000336:	bf00      	nop

08000338 <__aeabi_i2f>:
 8000338:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800033c:	bf48      	it	mi
 800033e:	4240      	negmi	r0, r0
 8000340:	ea5f 0c00 	movs.w	ip, r0
 8000344:	bf08      	it	eq
 8000346:	4770      	bxeq	lr
 8000348:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800034c:	4601      	mov	r1, r0
 800034e:	f04f 0000 	mov.w	r0, #0
 8000352:	e01c      	b.n	800038e <__aeabi_l2f+0x2a>

08000354 <__aeabi_ul2f>:
 8000354:	ea50 0201 	orrs.w	r2, r0, r1
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f04f 0300 	mov.w	r3, #0
 8000360:	e00a      	b.n	8000378 <__aeabi_l2f+0x14>
 8000362:	bf00      	nop

08000364 <__aeabi_l2f>:
 8000364:	ea50 0201 	orrs.w	r2, r0, r1
 8000368:	bf08      	it	eq
 800036a:	4770      	bxeq	lr
 800036c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000370:	d502      	bpl.n	8000378 <__aeabi_l2f+0x14>
 8000372:	4240      	negs	r0, r0
 8000374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000378:	ea5f 0c01 	movs.w	ip, r1
 800037c:	bf02      	ittt	eq
 800037e:	4684      	moveq	ip, r0
 8000380:	4601      	moveq	r1, r0
 8000382:	2000      	moveq	r0, #0
 8000384:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000388:	bf08      	it	eq
 800038a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800038e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000392:	fabc f28c 	clz	r2, ip
 8000396:	3a08      	subs	r2, #8
 8000398:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800039c:	db10      	blt.n	80003c0 <__aeabi_l2f+0x5c>
 800039e:	fa01 fc02 	lsl.w	ip, r1, r2
 80003a2:	4463      	add	r3, ip
 80003a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003a8:	f1c2 0220 	rsb	r2, r2, #32
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b0:	fa20 f202 	lsr.w	r2, r0, r2
 80003b4:	eb43 0002 	adc.w	r0, r3, r2
 80003b8:	bf08      	it	eq
 80003ba:	f020 0001 	biceq.w	r0, r0, #1
 80003be:	4770      	bx	lr
 80003c0:	f102 0220 	add.w	r2, r2, #32
 80003c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80003c8:	f1c2 0220 	rsb	r2, r2, #32
 80003cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d0:	fa21 f202 	lsr.w	r2, r1, r2
 80003d4:	eb43 0002 	adc.w	r0, r3, r2
 80003d8:	bf08      	it	eq
 80003da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003de:	4770      	bx	lr

080003e0 <__aeabi_fmul>:
 80003e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003e8:	bf1e      	ittt	ne
 80003ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ee:	ea92 0f0c 	teqne	r2, ip
 80003f2:	ea93 0f0c 	teqne	r3, ip
 80003f6:	d06f      	beq.n	80004d8 <__aeabi_fmul+0xf8>
 80003f8:	441a      	add	r2, r3
 80003fa:	ea80 0c01 	eor.w	ip, r0, r1
 80003fe:	0240      	lsls	r0, r0, #9
 8000400:	bf18      	it	ne
 8000402:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000406:	d01e      	beq.n	8000446 <__aeabi_fmul+0x66>
 8000408:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800040c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000410:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000414:	fba0 3101 	umull	r3, r1, r0, r1
 8000418:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800041c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000420:	bf3e      	ittt	cc
 8000422:	0049      	lslcc	r1, r1, #1
 8000424:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000428:	005b      	lslcc	r3, r3, #1
 800042a:	ea40 0001 	orr.w	r0, r0, r1
 800042e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000432:	2afd      	cmp	r2, #253	@ 0xfd
 8000434:	d81d      	bhi.n	8000472 <__aeabi_fmul+0x92>
 8000436:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800043a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800043e:	bf08      	it	eq
 8000440:	f020 0001 	biceq.w	r0, r0, #1
 8000444:	4770      	bx	lr
 8000446:	f090 0f00 	teq	r0, #0
 800044a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800044e:	bf08      	it	eq
 8000450:	0249      	lsleq	r1, r1, #9
 8000452:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000456:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800045a:	3a7f      	subs	r2, #127	@ 0x7f
 800045c:	bfc2      	ittt	gt
 800045e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000462:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000466:	4770      	bxgt	lr
 8000468:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	3a01      	subs	r2, #1
 8000472:	dc5d      	bgt.n	8000530 <__aeabi_fmul+0x150>
 8000474:	f112 0f19 	cmn.w	r2, #25
 8000478:	bfdc      	itt	le
 800047a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800047e:	4770      	bxle	lr
 8000480:	f1c2 0200 	rsb	r2, r2, #0
 8000484:	0041      	lsls	r1, r0, #1
 8000486:	fa21 f102 	lsr.w	r1, r1, r2
 800048a:	f1c2 0220 	rsb	r2, r2, #32
 800048e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000492:	ea5f 0031 	movs.w	r0, r1, rrx
 8000496:	f140 0000 	adc.w	r0, r0, #0
 800049a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800049e:	bf08      	it	eq
 80004a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004a4:	4770      	bx	lr
 80004a6:	f092 0f00 	teq	r2, #0
 80004aa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80004ae:	bf02      	ittt	eq
 80004b0:	0040      	lsleq	r0, r0, #1
 80004b2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80004b6:	3a01      	subeq	r2, #1
 80004b8:	d0f9      	beq.n	80004ae <__aeabi_fmul+0xce>
 80004ba:	ea40 000c 	orr.w	r0, r0, ip
 80004be:	f093 0f00 	teq	r3, #0
 80004c2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004c6:	bf02      	ittt	eq
 80004c8:	0049      	lsleq	r1, r1, #1
 80004ca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80004ce:	3b01      	subeq	r3, #1
 80004d0:	d0f9      	beq.n	80004c6 <__aeabi_fmul+0xe6>
 80004d2:	ea41 010c 	orr.w	r1, r1, ip
 80004d6:	e78f      	b.n	80003f8 <__aeabi_fmul+0x18>
 80004d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004dc:	ea92 0f0c 	teq	r2, ip
 80004e0:	bf18      	it	ne
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d00a      	beq.n	80004fe <__aeabi_fmul+0x11e>
 80004e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004ec:	bf18      	it	ne
 80004ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80004f2:	d1d8      	bne.n	80004a6 <__aeabi_fmul+0xc6>
 80004f4:	ea80 0001 	eor.w	r0, r0, r1
 80004f8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004fc:	4770      	bx	lr
 80004fe:	f090 0f00 	teq	r0, #0
 8000502:	bf17      	itett	ne
 8000504:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000508:	4608      	moveq	r0, r1
 800050a:	f091 0f00 	teqne	r1, #0
 800050e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000512:	d014      	beq.n	800053e <__aeabi_fmul+0x15e>
 8000514:	ea92 0f0c 	teq	r2, ip
 8000518:	d101      	bne.n	800051e <__aeabi_fmul+0x13e>
 800051a:	0242      	lsls	r2, r0, #9
 800051c:	d10f      	bne.n	800053e <__aeabi_fmul+0x15e>
 800051e:	ea93 0f0c 	teq	r3, ip
 8000522:	d103      	bne.n	800052c <__aeabi_fmul+0x14c>
 8000524:	024b      	lsls	r3, r1, #9
 8000526:	bf18      	it	ne
 8000528:	4608      	movne	r0, r1
 800052a:	d108      	bne.n	800053e <__aeabi_fmul+0x15e>
 800052c:	ea80 0001 	eor.w	r0, r0, r1
 8000530:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000534:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000538:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800053c:	4770      	bx	lr
 800053e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000542:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000546:	4770      	bx	lr

08000548 <__aeabi_fdiv>:
 8000548:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000550:	bf1e      	ittt	ne
 8000552:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000556:	ea92 0f0c 	teqne	r2, ip
 800055a:	ea93 0f0c 	teqne	r3, ip
 800055e:	d069      	beq.n	8000634 <__aeabi_fdiv+0xec>
 8000560:	eba2 0203 	sub.w	r2, r2, r3
 8000564:	ea80 0c01 	eor.w	ip, r0, r1
 8000568:	0249      	lsls	r1, r1, #9
 800056a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800056e:	d037      	beq.n	80005e0 <__aeabi_fdiv+0x98>
 8000570:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000574:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000578:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800057c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000580:	428b      	cmp	r3, r1
 8000582:	bf38      	it	cc
 8000584:	005b      	lslcc	r3, r3, #1
 8000586:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800058a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800058e:	428b      	cmp	r3, r1
 8000590:	bf24      	itt	cs
 8000592:	1a5b      	subcs	r3, r3, r1
 8000594:	ea40 000c 	orrcs.w	r0, r0, ip
 8000598:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800059c:	bf24      	itt	cs
 800059e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005aa:	bf24      	itt	cs
 80005ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005b8:	bf24      	itt	cs
 80005ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	bf18      	it	ne
 80005c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005ca:	d1e0      	bne.n	800058e <__aeabi_fdiv+0x46>
 80005cc:	2afd      	cmp	r2, #253	@ 0xfd
 80005ce:	f63f af50 	bhi.w	8000472 <__aeabi_fmul+0x92>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005d8:	bf08      	it	eq
 80005da:	f020 0001 	biceq.w	r0, r0, #1
 80005de:	4770      	bx	lr
 80005e0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80005e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005e8:	327f      	adds	r2, #127	@ 0x7f
 80005ea:	bfc2      	ittt	gt
 80005ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80005f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005f4:	4770      	bxgt	lr
 80005f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	3a01      	subs	r2, #1
 8000600:	e737      	b.n	8000472 <__aeabi_fmul+0x92>
 8000602:	f092 0f00 	teq	r2, #0
 8000606:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800060a:	bf02      	ittt	eq
 800060c:	0040      	lsleq	r0, r0, #1
 800060e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000612:	3a01      	subeq	r2, #1
 8000614:	d0f9      	beq.n	800060a <__aeabi_fdiv+0xc2>
 8000616:	ea40 000c 	orr.w	r0, r0, ip
 800061a:	f093 0f00 	teq	r3, #0
 800061e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000622:	bf02      	ittt	eq
 8000624:	0049      	lsleq	r1, r1, #1
 8000626:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800062a:	3b01      	subeq	r3, #1
 800062c:	d0f9      	beq.n	8000622 <__aeabi_fdiv+0xda>
 800062e:	ea41 010c 	orr.w	r1, r1, ip
 8000632:	e795      	b.n	8000560 <__aeabi_fdiv+0x18>
 8000634:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000638:	ea92 0f0c 	teq	r2, ip
 800063c:	d108      	bne.n	8000650 <__aeabi_fdiv+0x108>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	f47f af7d 	bne.w	800053e <__aeabi_fmul+0x15e>
 8000644:	ea93 0f0c 	teq	r3, ip
 8000648:	f47f af70 	bne.w	800052c <__aeabi_fmul+0x14c>
 800064c:	4608      	mov	r0, r1
 800064e:	e776      	b.n	800053e <__aeabi_fmul+0x15e>
 8000650:	ea93 0f0c 	teq	r3, ip
 8000654:	d104      	bne.n	8000660 <__aeabi_fdiv+0x118>
 8000656:	024b      	lsls	r3, r1, #9
 8000658:	f43f af4c 	beq.w	80004f4 <__aeabi_fmul+0x114>
 800065c:	4608      	mov	r0, r1
 800065e:	e76e      	b.n	800053e <__aeabi_fmul+0x15e>
 8000660:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000664:	bf18      	it	ne
 8000666:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800066a:	d1ca      	bne.n	8000602 <__aeabi_fdiv+0xba>
 800066c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000670:	f47f af5c 	bne.w	800052c <__aeabi_fmul+0x14c>
 8000674:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000678:	f47f af3c 	bne.w	80004f4 <__aeabi_fmul+0x114>
 800067c:	e75f      	b.n	800053e <__aeabi_fmul+0x15e>
 800067e:	bf00      	nop

08000680 <__aeabi_f2iz>:
 8000680:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000684:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000688:	d30f      	bcc.n	80006aa <__aeabi_f2iz+0x2a>
 800068a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800068e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000692:	d90d      	bls.n	80006b0 <__aeabi_f2iz+0x30>
 8000694:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000698:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800069c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a0:	fa23 f002 	lsr.w	r0, r3, r2
 80006a4:	bf18      	it	ne
 80006a6:	4240      	negne	r0, r0
 80006a8:	4770      	bx	lr
 80006aa:	f04f 0000 	mov.w	r0, #0
 80006ae:	4770      	bx	lr
 80006b0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80006b4:	d101      	bne.n	80006ba <__aeabi_f2iz+0x3a>
 80006b6:	0242      	lsls	r2, r0, #9
 80006b8:	d105      	bne.n	80006c6 <__aeabi_f2iz+0x46>
 80006ba:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80006be:	bf08      	it	eq
 80006c0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80006c4:	4770      	bx	lr
 80006c6:	f04f 0000 	mov.w	r0, #0
 80006ca:	4770      	bx	lr

080006cc <__aeabi_uldivmod>:
 80006cc:	b953      	cbnz	r3, 80006e4 <__aeabi_uldivmod+0x18>
 80006ce:	b94a      	cbnz	r2, 80006e4 <__aeabi_uldivmod+0x18>
 80006d0:	2900      	cmp	r1, #0
 80006d2:	bf08      	it	eq
 80006d4:	2800      	cmpeq	r0, #0
 80006d6:	bf1c      	itt	ne
 80006d8:	f04f 31ff 	movne.w	r1, #4294967295
 80006dc:	f04f 30ff 	movne.w	r0, #4294967295
 80006e0:	f000 b968 	b.w	80009b4 <__aeabi_idiv0>
 80006e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80006e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006ec:	f000 f806 	bl	80006fc <__udivmoddi4>
 80006f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f8:	b004      	add	sp, #16
 80006fa:	4770      	bx	lr

080006fc <__udivmoddi4>:
 80006fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000700:	9d08      	ldr	r5, [sp, #32]
 8000702:	460c      	mov	r4, r1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d14e      	bne.n	80007a6 <__udivmoddi4+0xaa>
 8000708:	4694      	mov	ip, r2
 800070a:	458c      	cmp	ip, r1
 800070c:	4686      	mov	lr, r0
 800070e:	fab2 f282 	clz	r2, r2
 8000712:	d962      	bls.n	80007da <__udivmoddi4+0xde>
 8000714:	b14a      	cbz	r2, 800072a <__udivmoddi4+0x2e>
 8000716:	f1c2 0320 	rsb	r3, r2, #32
 800071a:	4091      	lsls	r1, r2
 800071c:	fa20 f303 	lsr.w	r3, r0, r3
 8000720:	fa0c fc02 	lsl.w	ip, ip, r2
 8000724:	4319      	orrs	r1, r3
 8000726:	fa00 fe02 	lsl.w	lr, r0, r2
 800072a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800072e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000732:	fb07 1114 	mls	r1, r7, r4, r1
 8000736:	fa1f f68c 	uxth.w	r6, ip
 800073a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800073e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000742:	fb04 f106 	mul.w	r1, r4, r6
 8000746:	4299      	cmp	r1, r3
 8000748:	d90a      	bls.n	8000760 <__udivmoddi4+0x64>
 800074a:	eb1c 0303 	adds.w	r3, ip, r3
 800074e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000752:	f080 8110 	bcs.w	8000976 <__udivmoddi4+0x27a>
 8000756:	4299      	cmp	r1, r3
 8000758:	f240 810d 	bls.w	8000976 <__udivmoddi4+0x27a>
 800075c:	3c02      	subs	r4, #2
 800075e:	4463      	add	r3, ip
 8000760:	1a59      	subs	r1, r3, r1
 8000762:	fbb1 f0f7 	udiv	r0, r1, r7
 8000766:	fb07 1110 	mls	r1, r7, r0, r1
 800076a:	fb00 f606 	mul.w	r6, r0, r6
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000776:	429e      	cmp	r6, r3
 8000778:	d90a      	bls.n	8000790 <__udivmoddi4+0x94>
 800077a:	eb1c 0303 	adds.w	r3, ip, r3
 800077e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000782:	f080 80fa 	bcs.w	800097a <__udivmoddi4+0x27e>
 8000786:	429e      	cmp	r6, r3
 8000788:	f240 80f7 	bls.w	800097a <__udivmoddi4+0x27e>
 800078c:	4463      	add	r3, ip
 800078e:	3802      	subs	r0, #2
 8000790:	2100      	movs	r1, #0
 8000792:	1b9b      	subs	r3, r3, r6
 8000794:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000798:	b11d      	cbz	r5, 80007a2 <__udivmoddi4+0xa6>
 800079a:	40d3      	lsrs	r3, r2
 800079c:	2200      	movs	r2, #0
 800079e:	e9c5 3200 	strd	r3, r2, [r5]
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	428b      	cmp	r3, r1
 80007a8:	d905      	bls.n	80007b6 <__udivmoddi4+0xba>
 80007aa:	b10d      	cbz	r5, 80007b0 <__udivmoddi4+0xb4>
 80007ac:	e9c5 0100 	strd	r0, r1, [r5]
 80007b0:	2100      	movs	r1, #0
 80007b2:	4608      	mov	r0, r1
 80007b4:	e7f5      	b.n	80007a2 <__udivmoddi4+0xa6>
 80007b6:	fab3 f183 	clz	r1, r3
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d146      	bne.n	800084c <__udivmoddi4+0x150>
 80007be:	42a3      	cmp	r3, r4
 80007c0:	d302      	bcc.n	80007c8 <__udivmoddi4+0xcc>
 80007c2:	4290      	cmp	r0, r2
 80007c4:	f0c0 80ee 	bcc.w	80009a4 <__udivmoddi4+0x2a8>
 80007c8:	1a86      	subs	r6, r0, r2
 80007ca:	eb64 0303 	sbc.w	r3, r4, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	2d00      	cmp	r5, #0
 80007d2:	d0e6      	beq.n	80007a2 <__udivmoddi4+0xa6>
 80007d4:	e9c5 6300 	strd	r6, r3, [r5]
 80007d8:	e7e3      	b.n	80007a2 <__udivmoddi4+0xa6>
 80007da:	2a00      	cmp	r2, #0
 80007dc:	f040 808f 	bne.w	80008fe <__udivmoddi4+0x202>
 80007e0:	eba1 040c 	sub.w	r4, r1, ip
 80007e4:	2101      	movs	r1, #1
 80007e6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007ea:	fa1f f78c 	uxth.w	r7, ip
 80007ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80007f2:	fb08 4416 	mls	r4, r8, r6, r4
 80007f6:	fb07 f006 	mul.w	r0, r7, r6
 80007fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000802:	4298      	cmp	r0, r3
 8000804:	d908      	bls.n	8000818 <__udivmoddi4+0x11c>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f106 34ff 	add.w	r4, r6, #4294967295
 800080e:	d202      	bcs.n	8000816 <__udivmoddi4+0x11a>
 8000810:	4298      	cmp	r0, r3
 8000812:	f200 80cb 	bhi.w	80009ac <__udivmoddi4+0x2b0>
 8000816:	4626      	mov	r6, r4
 8000818:	1a1c      	subs	r4, r3, r0
 800081a:	fbb4 f0f8 	udiv	r0, r4, r8
 800081e:	fb08 4410 	mls	r4, r8, r0, r4
 8000822:	fb00 f707 	mul.w	r7, r0, r7
 8000826:	fa1f f38e 	uxth.w	r3, lr
 800082a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800082e:	429f      	cmp	r7, r3
 8000830:	d908      	bls.n	8000844 <__udivmoddi4+0x148>
 8000832:	eb1c 0303 	adds.w	r3, ip, r3
 8000836:	f100 34ff 	add.w	r4, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x146>
 800083c:	429f      	cmp	r7, r3
 800083e:	f200 80ae 	bhi.w	800099e <__udivmoddi4+0x2a2>
 8000842:	4620      	mov	r0, r4
 8000844:	1bdb      	subs	r3, r3, r7
 8000846:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800084a:	e7a5      	b.n	8000798 <__udivmoddi4+0x9c>
 800084c:	f1c1 0720 	rsb	r7, r1, #32
 8000850:	408b      	lsls	r3, r1
 8000852:	fa22 fc07 	lsr.w	ip, r2, r7
 8000856:	ea4c 0c03 	orr.w	ip, ip, r3
 800085a:	fa24 f607 	lsr.w	r6, r4, r7
 800085e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000862:	fbb6 f8f9 	udiv	r8, r6, r9
 8000866:	fa1f fe8c 	uxth.w	lr, ip
 800086a:	fb09 6618 	mls	r6, r9, r8, r6
 800086e:	fa20 f307 	lsr.w	r3, r0, r7
 8000872:	408c      	lsls	r4, r1
 8000874:	fa00 fa01 	lsl.w	sl, r0, r1
 8000878:	fb08 f00e 	mul.w	r0, r8, lr
 800087c:	431c      	orrs	r4, r3
 800087e:	0c23      	lsrs	r3, r4, #16
 8000880:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000884:	4298      	cmp	r0, r3
 8000886:	fa02 f201 	lsl.w	r2, r2, r1
 800088a:	d90a      	bls.n	80008a2 <__udivmoddi4+0x1a6>
 800088c:	eb1c 0303 	adds.w	r3, ip, r3
 8000890:	f108 36ff 	add.w	r6, r8, #4294967295
 8000894:	f080 8081 	bcs.w	800099a <__udivmoddi4+0x29e>
 8000898:	4298      	cmp	r0, r3
 800089a:	d97e      	bls.n	800099a <__udivmoddi4+0x29e>
 800089c:	f1a8 0802 	sub.w	r8, r8, #2
 80008a0:	4463      	add	r3, ip
 80008a2:	1a1e      	subs	r6, r3, r0
 80008a4:	fbb6 f3f9 	udiv	r3, r6, r9
 80008a8:	fb09 6613 	mls	r6, r9, r3, r6
 80008ac:	fb03 fe0e 	mul.w	lr, r3, lr
 80008b0:	b2a4      	uxth	r4, r4
 80008b2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80008b6:	45a6      	cmp	lr, r4
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x1d0>
 80008ba:	eb1c 0404 	adds.w	r4, ip, r4
 80008be:	f103 30ff 	add.w	r0, r3, #4294967295
 80008c2:	d266      	bcs.n	8000992 <__udivmoddi4+0x296>
 80008c4:	45a6      	cmp	lr, r4
 80008c6:	d964      	bls.n	8000992 <__udivmoddi4+0x296>
 80008c8:	3b02      	subs	r3, #2
 80008ca:	4464      	add	r4, ip
 80008cc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80008d0:	fba0 8302 	umull	r8, r3, r0, r2
 80008d4:	eba4 040e 	sub.w	r4, r4, lr
 80008d8:	429c      	cmp	r4, r3
 80008da:	46c6      	mov	lr, r8
 80008dc:	461e      	mov	r6, r3
 80008de:	d350      	bcc.n	8000982 <__udivmoddi4+0x286>
 80008e0:	d04d      	beq.n	800097e <__udivmoddi4+0x282>
 80008e2:	b155      	cbz	r5, 80008fa <__udivmoddi4+0x1fe>
 80008e4:	ebba 030e 	subs.w	r3, sl, lr
 80008e8:	eb64 0406 	sbc.w	r4, r4, r6
 80008ec:	fa04 f707 	lsl.w	r7, r4, r7
 80008f0:	40cb      	lsrs	r3, r1
 80008f2:	431f      	orrs	r7, r3
 80008f4:	40cc      	lsrs	r4, r1
 80008f6:	e9c5 7400 	strd	r7, r4, [r5]
 80008fa:	2100      	movs	r1, #0
 80008fc:	e751      	b.n	80007a2 <__udivmoddi4+0xa6>
 80008fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000902:	f1c2 0320 	rsb	r3, r2, #32
 8000906:	40d9      	lsrs	r1, r3
 8000908:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800090c:	fa20 f303 	lsr.w	r3, r0, r3
 8000910:	fa00 fe02 	lsl.w	lr, r0, r2
 8000914:	fbb1 f0f8 	udiv	r0, r1, r8
 8000918:	fb08 1110 	mls	r1, r8, r0, r1
 800091c:	4094      	lsls	r4, r2
 800091e:	431c      	orrs	r4, r3
 8000920:	fa1f f78c 	uxth.w	r7, ip
 8000924:	0c23      	lsrs	r3, r4, #16
 8000926:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800092a:	fb00 f107 	mul.w	r1, r0, r7
 800092e:	4299      	cmp	r1, r3
 8000930:	d908      	bls.n	8000944 <__udivmoddi4+0x248>
 8000932:	eb1c 0303 	adds.w	r3, ip, r3
 8000936:	f100 36ff 	add.w	r6, r0, #4294967295
 800093a:	d22c      	bcs.n	8000996 <__udivmoddi4+0x29a>
 800093c:	4299      	cmp	r1, r3
 800093e:	d92a      	bls.n	8000996 <__udivmoddi4+0x29a>
 8000940:	3802      	subs	r0, #2
 8000942:	4463      	add	r3, ip
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	fbb3 f1f8 	udiv	r1, r3, r8
 800094a:	fb08 3311 	mls	r3, r8, r1, r3
 800094e:	b2a4      	uxth	r4, r4
 8000950:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000954:	fb01 f307 	mul.w	r3, r1, r7
 8000958:	42a3      	cmp	r3, r4
 800095a:	d908      	bls.n	800096e <__udivmoddi4+0x272>
 800095c:	eb1c 0404 	adds.w	r4, ip, r4
 8000960:	f101 36ff 	add.w	r6, r1, #4294967295
 8000964:	d213      	bcs.n	800098e <__udivmoddi4+0x292>
 8000966:	42a3      	cmp	r3, r4
 8000968:	d911      	bls.n	800098e <__udivmoddi4+0x292>
 800096a:	3902      	subs	r1, #2
 800096c:	4464      	add	r4, ip
 800096e:	1ae4      	subs	r4, r4, r3
 8000970:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000974:	e73b      	b.n	80007ee <__udivmoddi4+0xf2>
 8000976:	4604      	mov	r4, r0
 8000978:	e6f2      	b.n	8000760 <__udivmoddi4+0x64>
 800097a:	4608      	mov	r0, r1
 800097c:	e708      	b.n	8000790 <__udivmoddi4+0x94>
 800097e:	45c2      	cmp	sl, r8
 8000980:	d2af      	bcs.n	80008e2 <__udivmoddi4+0x1e6>
 8000982:	ebb8 0e02 	subs.w	lr, r8, r2
 8000986:	eb63 060c 	sbc.w	r6, r3, ip
 800098a:	3801      	subs	r0, #1
 800098c:	e7a9      	b.n	80008e2 <__udivmoddi4+0x1e6>
 800098e:	4631      	mov	r1, r6
 8000990:	e7ed      	b.n	800096e <__udivmoddi4+0x272>
 8000992:	4603      	mov	r3, r0
 8000994:	e79a      	b.n	80008cc <__udivmoddi4+0x1d0>
 8000996:	4630      	mov	r0, r6
 8000998:	e7d4      	b.n	8000944 <__udivmoddi4+0x248>
 800099a:	46b0      	mov	r8, r6
 800099c:	e781      	b.n	80008a2 <__udivmoddi4+0x1a6>
 800099e:	4463      	add	r3, ip
 80009a0:	3802      	subs	r0, #2
 80009a2:	e74f      	b.n	8000844 <__udivmoddi4+0x148>
 80009a4:	4606      	mov	r6, r0
 80009a6:	4623      	mov	r3, r4
 80009a8:	4608      	mov	r0, r1
 80009aa:	e711      	b.n	80007d0 <__udivmoddi4+0xd4>
 80009ac:	3e02      	subs	r6, #2
 80009ae:	4463      	add	r3, ip
 80009b0:	e732      	b.n	8000818 <__udivmoddi4+0x11c>
 80009b2:	bf00      	nop

080009b4 <__aeabi_idiv0>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <HAL_TIM_IC_CaptureCallback>:
int Is_First_Captured = 0;

/* Measure Frequency */

/* USER CODE END 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a8e      	ldr	r2, [pc, #568]	@ (8000c00 <HAL_TIM_IC_CaptureCallback+0x248>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d157      	bne.n	8000a7a <HAL_TIM_IC_CaptureCallback+0xc2>
    	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7f1b      	ldrb	r3, [r3, #28]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d153      	bne.n	8000a7a <HAL_TIM_IC_CaptureCallback+0xc2>
    		        {
    		            if (Is_First_Captured == 0)
 80009d2:	4b8c      	ldr	r3, [pc, #560]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10a      	bne.n	80009f0 <HAL_TIM_IC_CaptureCallback+0x38>
    		            {
    		                IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80009da:	2100      	movs	r1, #0
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f002 fe4f 	bl	8003680 <HAL_TIM_ReadCapturedValue>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a88      	ldr	r2, [pc, #544]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 80009e6:	6013      	str	r3, [r2, #0]
    		                Is_First_Captured = 1;
 80009e8:	4b86      	ldr	r3, [pc, #536]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	e044      	b.n	8000a7a <HAL_TIM_IC_CaptureCallback+0xc2>
    		            }
    		            else
    		            {
    		                IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80009f0:	2100      	movs	r1, #0
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f002 fe44 	bl	8003680 <HAL_TIM_ReadCapturedValue>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a84      	ldr	r2, [pc, #528]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0x254>)
 80009fc:	6013      	str	r3, [r2, #0]

    		                // Debug output

    		                if (IC_Val2 > IC_Val1)
 80009fe:	4b83      	ldr	r3, [pc, #524]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0x254>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b81      	ldr	r3, [pc, #516]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d907      	bls.n	8000a1a <HAL_TIM_IC_CaptureCallback+0x62>
    		                {
    		                    Difference = IC_Val2 - IC_Val1;
 8000a0a:	4b80      	ldr	r3, [pc, #512]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0x254>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b7e      	ldr	r3, [pc, #504]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	4a7e      	ldr	r2, [pc, #504]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	e009      	b.n	8000a2e <HAL_TIM_IC_CaptureCallback+0x76>
    		                }
    		                else
    		                {
    		                    Difference = (0xffff - IC_Val1) + IC_Val2;
 8000a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0x254>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4b7a      	ldr	r3, [pc, #488]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000a28:	33ff      	adds	r3, #255	@ 0xff
 8000a2a:	4a79      	ldr	r2, [pc, #484]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000a2c:	6013      	str	r3, [r2, #0]
    		                }

    		                if (Difference > 0)
 8000a2e:	4b78      	ldr	r3, [pc, #480]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d012      	beq.n	8000a5c <HAL_TIM_IC_CaptureCallback+0xa4>
    		                {
    		                    float refClock = TIMCLOCK / PRESCALAR;
 8000a36:	4b77      	ldr	r3, [pc, #476]	@ (8000c14 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000a38:	617b      	str	r3, [r7, #20]
    		                    frequency[0] = refClock / Difference;
 8000a3a:	4b75      	ldr	r3, [pc, #468]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fc76 	bl	8000330 <__aeabi_ui2f>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4619      	mov	r1, r3
 8000a48:	6978      	ldr	r0, [r7, #20]
 8000a4a:	f7ff fd7d 	bl	8000548 <__aeabi_fdiv>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fe15 	bl	8000680 <__aeabi_f2iz>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a6f      	ldr	r2, [pc, #444]	@ (8000c18 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000a5a:	6013      	str	r3, [r2, #0]


    		                }

    		                __HAL_TIM_SET_COUNTER(htim, 0);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	@ 0x24
    		                Is_First_Captured = 0;
 8000a64:	4b67      	ldr	r3, [pc, #412]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
    		                HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	486b      	ldr	r0, [pc, #428]	@ (8000c1c <HAL_TIM_IC_CaptureCallback+0x264>)
 8000a6e:	f002 fa43 	bl	8002ef8 <HAL_TIM_IC_Stop_IT>
    		                HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000a72:	2104      	movs	r1, #4
 8000a74:	4869      	ldr	r0, [pc, #420]	@ (8000c1c <HAL_TIM_IC_CaptureCallback+0x264>)
 8000a76:	f002 f917 	bl	8002ca8 <HAL_TIM_IC_Start_IT>
    		            }
    		        }
    		    }if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7f1b      	ldrb	r3, [r3, #28]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d153      	bne.n	8000b2a <HAL_TIM_IC_CaptureCallback+0x172>
		        {
		            if (Is_First_Captured == 0)
 8000a82:	4b60      	ldr	r3, [pc, #384]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d10a      	bne.n	8000aa0 <HAL_TIM_IC_CaptureCallback+0xe8>
		            {
		                IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f002 fdf7 	bl	8003680 <HAL_TIM_ReadCapturedValue>
 8000a92:	4603      	mov	r3, r0
 8000a94:	4a5c      	ldr	r2, [pc, #368]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000a96:	6013      	str	r3, [r2, #0]
		                Is_First_Captured = 1;
 8000a98:	4b5a      	ldr	r3, [pc, #360]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	e044      	b.n	8000b2a <HAL_TIM_IC_CaptureCallback+0x172>
		            }
		            else
		            {
		                IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f002 fdec 	bl	8003680 <HAL_TIM_ReadCapturedValue>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4a58      	ldr	r2, [pc, #352]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0x254>)
 8000aac:	6013      	str	r3, [r2, #0]

		                // Debug output

		                if (IC_Val2 > IC_Val1)
 8000aae:	4b57      	ldr	r3, [pc, #348]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0x254>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4b55      	ldr	r3, [pc, #340]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d907      	bls.n	8000aca <HAL_TIM_IC_CaptureCallback+0x112>
		                {
		                    Difference = IC_Val2 - IC_Val1;
 8000aba:	4b54      	ldr	r3, [pc, #336]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0x254>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b52      	ldr	r3, [pc, #328]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	4a52      	ldr	r2, [pc, #328]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	e009      	b.n	8000ade <HAL_TIM_IC_CaptureCallback+0x126>
		                }
		                else
		                {
		                    Difference = (0xffff - IC_Val1) + IC_Val2;
 8000aca:	4b50      	ldr	r3, [pc, #320]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0x254>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b4e      	ldr	r3, [pc, #312]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000ad8:	33ff      	adds	r3, #255	@ 0xff
 8000ada:	4a4d      	ldr	r2, [pc, #308]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000adc:	6013      	str	r3, [r2, #0]
		                }

		                if (Difference > 0)
 8000ade:	4b4c      	ldr	r3, [pc, #304]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d012      	beq.n	8000b0c <HAL_TIM_IC_CaptureCallback+0x154>
		                {
		                    float refClock = TIMCLOCK / PRESCALAR;
 8000ae6:	4b4b      	ldr	r3, [pc, #300]	@ (8000c14 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000ae8:	613b      	str	r3, [r7, #16]
		                    frequency[1] = refClock / Difference;
 8000aea:	4b49      	ldr	r3, [pc, #292]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fc1e 	bl	8000330 <__aeabi_ui2f>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4619      	mov	r1, r3
 8000af8:	6938      	ldr	r0, [r7, #16]
 8000afa:	f7ff fd25 	bl	8000548 <__aeabi_fdiv>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fdbd 	bl	8000680 <__aeabi_f2iz>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a43      	ldr	r2, [pc, #268]	@ (8000c18 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000b0a:	6053      	str	r3, [r2, #4]


		                }

		                __HAL_TIM_SET_COUNTER(htim, 0);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	@ 0x24
		                Is_First_Captured = 0;
 8000b14:	4b3b      	ldr	r3, [pc, #236]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
		                HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_2);
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	483f      	ldr	r0, [pc, #252]	@ (8000c1c <HAL_TIM_IC_CaptureCallback+0x264>)
 8000b1e:	f002 f9eb 	bl	8002ef8 <HAL_TIM_IC_Stop_IT>
		                HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000b22:	2108      	movs	r1, #8
 8000b24:	483d      	ldr	r0, [pc, #244]	@ (8000c1c <HAL_TIM_IC_CaptureCallback+0x264>)
 8000b26:	f002 f8bf 	bl	8002ca8 <HAL_TIM_IC_Start_IT>
		            }
		        }if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7f1b      	ldrb	r3, [r3, #28]
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d153      	bne.n	8000bda <HAL_TIM_IC_CaptureCallback+0x222>
		        {
		            if (Is_First_Captured == 0)
 8000b32:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10a      	bne.n	8000b50 <HAL_TIM_IC_CaptureCallback+0x198>
		            {
		                IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000b3a:	2108      	movs	r1, #8
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f002 fd9f 	bl	8003680 <HAL_TIM_ReadCapturedValue>
 8000b42:	4603      	mov	r3, r0
 8000b44:	4a30      	ldr	r2, [pc, #192]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000b46:	6013      	str	r3, [r2, #0]
		                Is_First_Captured = 1;
 8000b48:	4b2e      	ldr	r3, [pc, #184]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e044      	b.n	8000bda <HAL_TIM_IC_CaptureCallback+0x222>
		            }
		            else
		            {
		                IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000b50:	2108      	movs	r1, #8
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f002 fd94 	bl	8003680 <HAL_TIM_ReadCapturedValue>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0x254>)
 8000b5c:	6013      	str	r3, [r2, #0]

		                // Debug output

		                if (IC_Val2 > IC_Val1)
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0x254>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d907      	bls.n	8000b7a <HAL_TIM_IC_CaptureCallback+0x1c2>
		                {
		                    Difference = IC_Val2 - IC_Val1;
 8000b6a:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0x254>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	4b26      	ldr	r3, [pc, #152]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	4a26      	ldr	r2, [pc, #152]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	e009      	b.n	8000b8e <HAL_TIM_IC_CaptureCallback+0x1d6>
		                }
		                else
		                {
		                    Difference = (0xffff - IC_Val1) + IC_Val2;
 8000b7a:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0x254>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000b88:	33ff      	adds	r3, #255	@ 0xff
 8000b8a:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000b8c:	6013      	str	r3, [r2, #0]
		                }

		                if (Difference > 0)
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d012      	beq.n	8000bbc <HAL_TIM_IC_CaptureCallback+0x204>
		                {
		                    float refClock = TIMCLOCK / PRESCALAR;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000b98:	60fb      	str	r3, [r7, #12]
		                    frequency[2] = refClock / Difference;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fbc6 	bl	8000330 <__aeabi_ui2f>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f7ff fccd 	bl	8000548 <__aeabi_fdiv>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fd65 	bl	8000680 <__aeabi_f2iz>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a17      	ldr	r2, [pc, #92]	@ (8000c18 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000bba:	6093      	str	r3, [r2, #8]


		                }

		                __HAL_TIM_SET_COUNTER(htim, 0);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	@ 0x24
		                Is_First_Captured = 0;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
		                HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_3);
 8000bca:	2108      	movs	r1, #8
 8000bcc:	4813      	ldr	r0, [pc, #76]	@ (8000c1c <HAL_TIM_IC_CaptureCallback+0x264>)
 8000bce:	f002 f993 	bl	8002ef8 <HAL_TIM_IC_Stop_IT>
		                HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000bd2:	210c      	movs	r1, #12
 8000bd4:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <HAL_TIM_IC_CaptureCallback+0x264>)
 8000bd6:	f002 f867 	bl	8002ca8 <HAL_TIM_IC_Start_IT>
		            }
		        }if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7f1b      	ldrb	r3, [r3, #28]
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d163      	bne.n	8000caa <HAL_TIM_IC_CaptureCallback+0x2f2>
		        {
		            if (Is_First_Captured == 0)
 8000be2:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d11a      	bne.n	8000c20 <HAL_TIM_IC_CaptureCallback+0x268>
		            {
		                IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000bea:	210c      	movs	r1, #12
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f002 fd47 	bl	8003680 <HAL_TIM_ReadCapturedValue>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000bf6:	6013      	str	r3, [r2, #0]
		                Is_First_Captured = 1;
 8000bf8:	4b02      	ldr	r3, [pc, #8]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
		                HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_4);
		                HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
		            }
		        }

    }
 8000bfe:	e054      	b.n	8000caa <HAL_TIM_IC_CaptureCallback+0x2f2>
 8000c00:	40000800 	.word	0x40000800
 8000c04:	200005f8 	.word	0x200005f8
 8000c08:	200005ec 	.word	0x200005ec
 8000c0c:	200005f0 	.word	0x200005f0
 8000c10:	200005f4 	.word	0x200005f4
 8000c14:	49742400 	.word	0x49742400
 8000c18:	200005dc 	.word	0x200005dc
 8000c1c:	20000070 	.word	0x20000070
		                IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000c20:	210c      	movs	r1, #12
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f002 fd2c 	bl	8003680 <HAL_TIM_ReadCapturedValue>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4a22      	ldr	r2, [pc, #136]	@ (8000cb4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8000c2c:	6013      	str	r3, [r2, #0]
		                if (IC_Val2 > IC_Val1)
 8000c2e:	4b21      	ldr	r3, [pc, #132]	@ (8000cb4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x300>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <HAL_TIM_IC_CaptureCallback+0x292>
		                    Difference = IC_Val2 - IC_Val1;
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x300>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	4a1d      	ldr	r2, [pc, #116]	@ (8000cbc <HAL_TIM_IC_CaptureCallback+0x304>)
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	e009      	b.n	8000c5e <HAL_TIM_IC_CaptureCallback+0x2a6>
		                    Difference = (0xffff - IC_Val1) + IC_Val2;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x300>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000c58:	33ff      	adds	r3, #255	@ 0xff
 8000c5a:	4a18      	ldr	r2, [pc, #96]	@ (8000cbc <HAL_TIM_IC_CaptureCallback+0x304>)
 8000c5c:	6013      	str	r3, [r2, #0]
		                if (Difference > 0)
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <HAL_TIM_IC_CaptureCallback+0x304>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d012      	beq.n	8000c8c <HAL_TIM_IC_CaptureCallback+0x2d4>
		                    float refClock = TIMCLOCK / PRESCALAR;
 8000c66:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <HAL_TIM_IC_CaptureCallback+0x308>)
 8000c68:	60bb      	str	r3, [r7, #8]
		                    frequency[3] = refClock / Difference;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <HAL_TIM_IC_CaptureCallback+0x304>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fb5e 	bl	8000330 <__aeabi_ui2f>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4619      	mov	r1, r3
 8000c78:	68b8      	ldr	r0, [r7, #8]
 8000c7a:	f7ff fc65 	bl	8000548 <__aeabi_fdiv>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fcfd 	bl	8000680 <__aeabi_f2iz>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc4 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8000c8a:	60d3      	str	r3, [r2, #12]
		                __HAL_TIM_SET_COUNTER(htim, 0);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	@ 0x24
		                Is_First_Captured = 0;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <HAL_TIM_IC_CaptureCallback+0x310>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
		                HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_4);
 8000c9a:	210c      	movs	r1, #12
 8000c9c:	480b      	ldr	r0, [pc, #44]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x314>)
 8000c9e:	f002 f92b 	bl	8002ef8 <HAL_TIM_IC_Stop_IT>
		                HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4809      	ldr	r0, [pc, #36]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x314>)
 8000ca6:	f001 ffff 	bl	8002ca8 <HAL_TIM_IC_Start_IT>
    }
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200005f0 	.word	0x200005f0
 8000cb8:	200005ec 	.word	0x200005ec
 8000cbc:	200005f4 	.word	0x200005f4
 8000cc0:	49742400 	.word	0x49742400
 8000cc4:	200005dc 	.word	0x200005dc
 8000cc8:	200005f8 	.word	0x200005f8
 8000ccc:	20000070 	.word	0x20000070

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd4:	f000 fd20 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */
 // Array for storing frequency of each channel
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd8:	f000 f832 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cdc:	f000 f9f2 	bl	80010c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ce0:	f000 f99c 	bl	800101c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ce4:	f000 f9c4 	bl	8001070 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000ce8:	f000 f870 	bl	8000dcc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cec:	f000 f904 	bl	8000ef8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  TIM3->CCR1 = 50;  // Set duty cycle for channel 1
 8000cf0:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <main+0x64>)
 8000cf2:	2232      	movs	r2, #50	@ 0x32
 8000cf4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = 50; // Set duty cycle for channel 2
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <main+0x64>)
 8000cf8:	2232      	movs	r2, #50	@ 0x32
 8000cfa:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3->CCR3 = 50; // Set duty cycle for channel 3
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <main+0x64>)
 8000cfe:	2232      	movs	r2, #50	@ 0x32
 8000d00:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM3->CCR4 = 50; // Set duty cycle for channel 4
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <main+0x64>)
 8000d04:	2232      	movs	r2, #50	@ 0x32
 8000d06:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <main+0x68>)
 8000d0c:	f001 feac 	bl	8002a68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d10:	2104      	movs	r1, #4
 8000d12:	4809      	ldr	r0, [pc, #36]	@ (8000d38 <main+0x68>)
 8000d14:	f001 fea8 	bl	8002a68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000d18:	2108      	movs	r1, #8
 8000d1a:	4807      	ldr	r0, [pc, #28]	@ (8000d38 <main+0x68>)
 8000d1c:	f001 fea4 	bl	8002a68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000d20:	210c      	movs	r1, #12
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <main+0x68>)
 8000d24:	f001 fea0 	bl	8002a68 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <main+0x6c>)
 8000d2c:	f001 ffbc 	bl	8002ca8 <HAL_TIM_IC_Start_IT>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <main+0x60>
 8000d34:	40000400 	.word	0x40000400
 8000d38:	20000028 	.word	0x20000028
 8000d3c:	20000070 	.word	0x20000070

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b092      	sub	sp, #72	@ 0x48
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0318 	add.w	r3, r7, #24
 8000d4a:	2230      	movs	r2, #48	@ 0x30
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 fde7 	bl	8004922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d74:	2308      	movs	r3, #8
 8000d76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000d78:	23f0      	movs	r3, #240	@ 0xf0
 8000d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000d80:	2305      	movs	r3, #5
 8000d82:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 f92b 	bl	8001fe4 <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d94:	f000 fa9a 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	230f      	movs	r3, #15
 8000d9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000da4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000da8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000daa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2103      	movs	r1, #3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 fb69 	bl	800248c <HAL_RCC_ClockConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000dc0:	f000 fa84 	bl	80012cc <Error_Handler>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3748      	adds	r7, #72	@ 0x48
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	@ 0x38
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dfc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000dfe:	4a3d      	ldr	r2, [pc, #244]	@ (8000ef4 <MX_TIM3_Init+0x128>)
 8000e00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59;
 8000e02:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000e04:	223b      	movs	r2, #59	@ 0x3b
 8000e06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000e0e:	4b38      	ldr	r3, [pc, #224]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000e10:	2263      	movs	r2, #99	@ 0x63
 8000e12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b36      	ldr	r3, [pc, #216]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e1a:	4b35      	ldr	r3, [pc, #212]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000e1c:	2280      	movs	r2, #128	@ 0x80
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e20:	4833      	ldr	r0, [pc, #204]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000e22:	f001 fd79 	bl	8002918 <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000e2c:	f000 fa4e 	bl	80012cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	482c      	ldr	r0, [pc, #176]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000e3e:	f002 fb57 	bl	80034f0 <HAL_TIM_ConfigClockSource>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000e48:	f000 fa40 	bl	80012cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e4c:	4828      	ldr	r0, [pc, #160]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000e4e:	f001 fdb2 	bl	80029b6 <HAL_TIM_PWM_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e58:	f000 fa38 	bl	80012cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4821      	ldr	r0, [pc, #132]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000e6c:	f003 f8a6 	bl	8003fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000e76:	f000 fa29 	bl	80012cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7a:	2360      	movs	r3, #96	@ 0x60
 8000e7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000e7e:	2332      	movs	r3, #50	@ 0x32
 8000e80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4817      	ldr	r0, [pc, #92]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000e92:	f002 fa6b 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000e9c:	f000 fa16 	bl	80012cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4812      	ldr	r0, [pc, #72]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000ea8:	f002 fa60 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000eb2:	f000 fa0b 	bl	80012cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2208      	movs	r2, #8
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000ebe:	f002 fa55 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8000ec8:	f000 fa00 	bl	80012cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	220c      	movs	r2, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4807      	ldr	r0, [pc, #28]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000ed4:	f002 fa4a 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8000ede:	f000 f9f5 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ee2:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <MX_TIM3_Init+0x124>)
 8000ee4:	f000 fa8c 	bl	8001400 <HAL_TIM_MspPostInit>

}
 8000ee8:	bf00      	nop
 8000eea:	3738      	adds	r7, #56	@ 0x38
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000028 	.word	0x20000028
 8000ef4:	40000400 	.word	0x40000400

08000ef8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0318 	add.w	r3, r7, #24
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f16:	463b      	mov	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f22:	4b3c      	ldr	r3, [pc, #240]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000f24:	4a3c      	ldr	r2, [pc, #240]	@ (8001018 <MX_TIM4_Init+0x120>)
 8000f26:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59;
 8000f28:	4b3a      	ldr	r3, [pc, #232]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000f2a:	223b      	movs	r2, #59	@ 0x3b
 8000f2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2e:	4b39      	ldr	r3, [pc, #228]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f34:	4b37      	ldr	r3, [pc, #220]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000f36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3c:	4b35      	ldr	r3, [pc, #212]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f42:	4b34      	ldr	r3, [pc, #208]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000f44:	2280      	movs	r2, #128	@ 0x80
 8000f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f48:	4832      	ldr	r0, [pc, #200]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000f4a:	f001 fce5 	bl	8002918 <HAL_TIM_Base_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000f54:	f000 f9ba 	bl	80012cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f5c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f5e:	f107 0318 	add.w	r3, r7, #24
 8000f62:	4619      	mov	r1, r3
 8000f64:	482b      	ldr	r0, [pc, #172]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000f66:	f002 fac3 	bl	80034f0 <HAL_TIM_ConfigClockSource>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000f70:	f000 f9ac 	bl	80012cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000f74:	4827      	ldr	r0, [pc, #156]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000f76:	f001 fe3f 	bl	8002bf8 <HAL_TIM_IC_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000f80:	f000 f9a4 	bl	80012cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4619      	mov	r1, r3
 8000f92:	4820      	ldr	r0, [pc, #128]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000f94:	f003 f812 	bl	8003fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000f9e:	f000 f995 	bl	80012cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4816      	ldr	r0, [pc, #88]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000fba:	f002 f93b 	bl	8003234 <HAL_TIM_IC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000fc4:	f000 f982 	bl	80012cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2204      	movs	r2, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4811      	ldr	r0, [pc, #68]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000fd0:	f002 f930 	bl	8003234 <HAL_TIM_IC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8000fda:	f000 f977 	bl	80012cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480b      	ldr	r0, [pc, #44]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000fe6:	f002 f925 	bl	8003234 <HAL_TIM_IC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8000ff0:	f000 f96c 	bl	80012cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <MX_TIM4_Init+0x11c>)
 8000ffc:	f002 f91a 	bl	8003234 <HAL_TIM_IC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8001006:	f000 f961 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	@ 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000070 	.word	0x20000070
 8001018:	40000800 	.word	0x40000800

0800101c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_USART3_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	@ (800106c <MX_USART3_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <MX_USART3_UART_Init+0x4c>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_USART3_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_USART3_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_USART3_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_USART3_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <MX_USART3_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_USART3_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_USART3_UART_Init+0x4c>)
 8001054:	f003 f83e 	bl	80040d4 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800105e:	f000 f935 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000b8 	.word	0x200000b8
 800106c:	40004800 	.word	0x40004800

08001070 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001076:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800107a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800107c:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800107e:	2204      	movs	r2, #4
 8001080:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001084:	2202      	movs	r2, #2
 8001086:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001090:	2202      	movs	r2, #2
 8001092:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001094:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001096:	2201      	movs	r2, #1
 8001098:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010ae:	f000 fe89 	bl	8001dc4 <HAL_PCD_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80010b8:	f000 f908 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000100 	.word	0x20000100

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	@ 0x30
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	4b76      	ldr	r3, [pc, #472]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a75      	ldr	r2, [pc, #468]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b73      	ldr	r3, [pc, #460]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	4b6f      	ldr	r3, [pc, #444]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a6e      	ldr	r2, [pc, #440]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b6c      	ldr	r3, [pc, #432]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b68      	ldr	r3, [pc, #416]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a67      	ldr	r2, [pc, #412]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b65      	ldr	r3, [pc, #404]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b61      	ldr	r3, [pc, #388]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a60      	ldr	r2, [pc, #384]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b5e      	ldr	r3, [pc, #376]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b5a      	ldr	r3, [pc, #360]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a59      	ldr	r2, [pc, #356]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b57      	ldr	r3, [pc, #348]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b53      	ldr	r3, [pc, #332]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a52      	ldr	r2, [pc, #328]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 8001170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b50      	ldr	r3, [pc, #320]	@ (80012b8 <MX_GPIO_Init+0x1f4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(on_off_GPIO_Port, on_off_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2108      	movs	r1, #8
 8001186:	484d      	ldr	r0, [pc, #308]	@ (80012bc <MX_GPIO_Init+0x1f8>)
 8001188:	f000 fe04 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001192:	484b      	ldr	r0, [pc, #300]	@ (80012c0 <MX_GPIO_Init+0x1fc>)
 8001194:	f000 fdfe 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2140      	movs	r1, #64	@ 0x40
 800119c:	4849      	ldr	r0, [pc, #292]	@ (80012c4 <MX_GPIO_Init+0x200>)
 800119e:	f000 fdf9 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4843      	ldr	r0, [pc, #268]	@ (80012c8 <MX_GPIO_Init+0x204>)
 80011ba:	f000 fc4d 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011be:	2332      	movs	r3, #50	@ 0x32
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ce:	230b      	movs	r3, #11
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	483b      	ldr	r0, [pc, #236]	@ (80012c8 <MX_GPIO_Init+0x204>)
 80011da:	f000 fc3d 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011de:	2386      	movs	r3, #134	@ 0x86
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ee:	230b      	movs	r3, #11
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	4830      	ldr	r0, [pc, #192]	@ (80012bc <MX_GPIO_Init+0x1f8>)
 80011fa:	f000 fc2d 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : on_off_Pin */
  GPIO_InitStruct.Pin = on_off_Pin;
 80011fe:	2308      	movs	r3, #8
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(on_off_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4829      	ldr	r0, [pc, #164]	@ (80012bc <MX_GPIO_Init+0x1f8>)
 8001216:	f000 fc1f 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800121a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4823      	ldr	r0, [pc, #140]	@ (80012c0 <MX_GPIO_Init+0x1fc>)
 8001234:	f000 fc10 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001238:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800124a:	230b      	movs	r3, #11
 800124c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	481a      	ldr	r0, [pc, #104]	@ (80012c0 <MX_GPIO_Init+0x1fc>)
 8001256:	f000 fbff 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800125a:	2340      	movs	r3, #64	@ 0x40
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4814      	ldr	r0, [pc, #80]	@ (80012c4 <MX_GPIO_Init+0x200>)
 8001272:	f000 fbf1 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001276:	2380      	movs	r3, #128	@ 0x80
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4619      	mov	r1, r3
 8001288:	480e      	ldr	r0, [pc, #56]	@ (80012c4 <MX_GPIO_Init+0x200>)
 800128a:	f000 fbe5 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800128e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a0:	230b      	movs	r3, #11
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	@ (80012c4 <MX_GPIO_Init+0x200>)
 80012ac:	f000 fbd4 	bl	8001a58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b0:	bf00      	nop
 80012b2:	3730      	adds	r7, #48	@ 0x30
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40021800 	.word	0x40021800
 80012c8:	40020800 	.word	0x40020800

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <Error_Handler+0x8>

080012d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_MspInit+0x48>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001320 <HAL_MspInit+0x48>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <HAL_MspInit+0x48>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_MspInit+0x48>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <HAL_MspInit+0x48>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	@ 0x40
 800130a:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <HAL_MspInit+0x48>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	40023800 	.word	0x40023800

08001324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a2b      	ldr	r2, [pc, #172]	@ (80013f0 <HAL_TIM_Base_MspInit+0xcc>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d116      	bne.n	8001374 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <HAL_TIM_Base_MspInit+0xd0>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	4a29      	ldr	r2, [pc, #164]	@ (80013f4 <HAL_TIM_Base_MspInit+0xd0>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6413      	str	r3, [r2, #64]	@ 0x40
 8001356:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <HAL_TIM_Base_MspInit+0xd0>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	201d      	movs	r0, #29
 8001368:	f000 fb3f 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800136c:	201d      	movs	r0, #29
 800136e:	f000 fb58 	bl	8001a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001372:	e039      	b.n	80013e8 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM4)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1f      	ldr	r2, [pc, #124]	@ (80013f8 <HAL_TIM_Base_MspInit+0xd4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d134      	bne.n	80013e8 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <HAL_TIM_Base_MspInit+0xd0>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <HAL_TIM_Base_MspInit+0xd0>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	6413      	str	r3, [r2, #64]	@ 0x40
 800138e:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <HAL_TIM_Base_MspInit+0xd0>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_TIM_Base_MspInit+0xd0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a14      	ldr	r2, [pc, #80]	@ (80013f4 <HAL_TIM_Base_MspInit+0xd0>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <HAL_TIM_Base_MspInit+0xd0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013b6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013c8:	2302      	movs	r3, #2
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	480a      	ldr	r0, [pc, #40]	@ (80013fc <HAL_TIM_Base_MspInit+0xd8>)
 80013d4:	f000 fb40 	bl	8001a58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	201e      	movs	r0, #30
 80013de:	f000 fb04 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013e2:	201e      	movs	r0, #30
 80013e4:	f000 fb1d 	bl	8001a22 <HAL_NVIC_EnableIRQ>
}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	@ 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40000400 	.word	0x40000400
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40000800 	.word	0x40000800
 80013fc:	40020c00 	.word	0x40020c00

08001400 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a30      	ldr	r2, [pc, #192]	@ (80014e0 <HAL_TIM_MspPostInit+0xe0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d15a      	bne.n	80014d8 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b2f      	ldr	r3, [pc, #188]	@ (80014e4 <HAL_TIM_MspPostInit+0xe4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a2e      	ldr	r2, [pc, #184]	@ (80014e4 <HAL_TIM_MspPostInit+0xe4>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b2c      	ldr	r3, [pc, #176]	@ (80014e4 <HAL_TIM_MspPostInit+0xe4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b28      	ldr	r3, [pc, #160]	@ (80014e4 <HAL_TIM_MspPostInit+0xe4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a27      	ldr	r2, [pc, #156]	@ (80014e4 <HAL_TIM_MspPostInit+0xe4>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b25      	ldr	r3, [pc, #148]	@ (80014e4 <HAL_TIM_MspPostInit+0xe4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <HAL_TIM_MspPostInit+0xe4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a20      	ldr	r2, [pc, #128]	@ (80014e4 <HAL_TIM_MspPostInit+0xe4>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <HAL_TIM_MspPostInit+0xe4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001476:	2340      	movs	r3, #64	@ 0x40
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001486:	2302      	movs	r3, #2
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4815      	ldr	r0, [pc, #84]	@ (80014e8 <HAL_TIM_MspPostInit+0xe8>)
 8001492:	f000 fae1 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001496:	2302      	movs	r3, #2
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014a6:	2302      	movs	r3, #2
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	480e      	ldr	r0, [pc, #56]	@ (80014ec <HAL_TIM_MspPostInit+0xec>)
 80014b2:	f000 fad1 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014b6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014c8:	2302      	movs	r3, #2
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <HAL_TIM_MspPostInit+0xf0>)
 80014d4:	f000 fac0 	bl	8001a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	@ 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40000400 	.word	0x40000400
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020800 	.word	0x40020800

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	@ (8001578 <HAL_UART_MspInit+0x84>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12c      	bne.n	8001570 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <HAL_UART_MspInit+0x88>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	4a17      	ldr	r2, [pc, #92]	@ (800157c <HAL_UART_MspInit+0x88>)
 8001520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001524:	6413      	str	r3, [r2, #64]	@ 0x40
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_UART_MspInit+0x88>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <HAL_UART_MspInit+0x88>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a10      	ldr	r2, [pc, #64]	@ (800157c <HAL_UART_MspInit+0x88>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_UART_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800154e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001560:	2307      	movs	r3, #7
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	4805      	ldr	r0, [pc, #20]	@ (8001580 <HAL_UART_MspInit+0x8c>)
 800156c:	f000 fa74 	bl	8001a58 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40004800 	.word	0x40004800
 800157c:	40023800 	.word	0x40023800
 8001580:	40020c00 	.word	0x40020c00

08001584 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015a4:	d13f      	bne.n	8001626 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <HAL_PCD_MspInit+0xac>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a20      	ldr	r2, [pc, #128]	@ (8001630 <HAL_PCD_MspInit+0xac>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001630 <HAL_PCD_MspInit+0xac>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015c2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015d4:	230a      	movs	r3, #10
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4815      	ldr	r0, [pc, #84]	@ (8001634 <HAL_PCD_MspInit+0xb0>)
 80015e0:	f000 fa3a 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	480e      	ldr	r0, [pc, #56]	@ (8001634 <HAL_PCD_MspInit+0xb0>)
 80015fa:	f000 fa2d 	bl	8001a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <HAL_PCD_MspInit+0xac>)
 8001600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001602:	4a0b      	ldr	r2, [pc, #44]	@ (8001630 <HAL_PCD_MspInit+0xac>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001608:	6353      	str	r3, [r2, #52]	@ 0x34
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <HAL_PCD_MspInit+0xac>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001612:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <HAL_PCD_MspInit+0xac>)
 8001614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001618:	6453      	str	r3, [r2, #68]	@ 0x44
 800161a:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <HAL_PCD_MspInit+0xac>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <NMI_Handler+0x4>

08001640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <MemManage_Handler+0x4>

08001650 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <UsageFault_Handler+0x4>

08001660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 f898 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001694:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <TIM3_IRQHandler+0x10>)
 8001696:	f001 fcdd 	bl	8003054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000028 	.word	0x20000028

080016a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <TIM4_IRQHandler+0x10>)
 80016aa:	f001 fcd3 	bl	8003054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000070 	.word	0x20000070

080016b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80016c8:	f7ff fff6 	bl	80016b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016cc:	480c      	ldr	r0, [pc, #48]	@ (8001700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ce:	490d      	ldr	r1, [pc, #52]	@ (8001704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f2:	f003 f91f 	bl	8004934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff faeb 	bl	8000cd0 <main>
  bx  lr
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001708:	080049bc 	.word	0x080049bc
  ldr r2, =_sbss
 800170c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001710:	20000600 	.word	0x20000600

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <HAL_Init+0x40>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_Init+0x40>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <HAL_Init+0x40>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f947 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff fdc4 	bl	80012d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f95f 	bl	8001a3e <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 f927 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	@ (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_IncTick+0x1c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_IncTick+0x20>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a03      	ldr	r2, [pc, #12]	@ (80017dc <HAL_IncTick+0x20>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	20000008 	.word	0x20000008
 80017dc:	200005fc 	.word	0x200005fc

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b02      	ldr	r3, [pc, #8]	@ (80017f0 <HAL_GetTick+0x10>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	200005fc 	.word	0x200005fc

080017f4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff fff0 	bl	80017e0 <HAL_GetTick>
 8001800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d005      	beq.n	800181a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <HAL_Delay+0x44>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181a:	bf00      	nop
 800181c:	f7ff ffe0 	bl	80017e0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d8f7      	bhi.n	800181c <HAL_Delay+0x28>
  {
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000008 	.word	0x20000008

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800186c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186e:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	60d3      	str	r3, [r2, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4906      	ldr	r1, [pc, #24]	@ (80018d4 <__NVIC_EnableIRQ+0x34>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	@ (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	@ (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff90 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff2d 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff42 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff90 	bl	800192c <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff5f 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff35 	bl	80018a0 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffa2 	bl	8001990 <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	e16f      	b.n	8001d48 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8161 	beq.w	8001d42 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d005      	beq.n	8001a98 <HAL_GPIO_Init+0x40>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d130      	bne.n	8001afa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ace:	2201      	movs	r2, #1
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f003 0201 	and.w	r2, r3, #1
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d017      	beq.n	8001b36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d123      	bne.n	8001b8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	6939      	ldr	r1, [r7, #16]
 8001b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0203 	and.w	r2, r3, #3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80bb 	beq.w	8001d42 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	4b64      	ldr	r3, [pc, #400]	@ (8001d64 <HAL_GPIO_Init+0x30c>)
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd4:	4a63      	ldr	r2, [pc, #396]	@ (8001d64 <HAL_GPIO_Init+0x30c>)
 8001bd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bda:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bdc:	4b61      	ldr	r3, [pc, #388]	@ (8001d64 <HAL_GPIO_Init+0x30c>)
 8001bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001be8:	4a5f      	ldr	r2, [pc, #380]	@ (8001d68 <HAL_GPIO_Init+0x310>)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a57      	ldr	r2, [pc, #348]	@ (8001d6c <HAL_GPIO_Init+0x314>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d031      	beq.n	8001c78 <HAL_GPIO_Init+0x220>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a56      	ldr	r2, [pc, #344]	@ (8001d70 <HAL_GPIO_Init+0x318>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d02b      	beq.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a55      	ldr	r2, [pc, #340]	@ (8001d74 <HAL_GPIO_Init+0x31c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d025      	beq.n	8001c70 <HAL_GPIO_Init+0x218>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a54      	ldr	r2, [pc, #336]	@ (8001d78 <HAL_GPIO_Init+0x320>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d01f      	beq.n	8001c6c <HAL_GPIO_Init+0x214>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a53      	ldr	r2, [pc, #332]	@ (8001d7c <HAL_GPIO_Init+0x324>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d019      	beq.n	8001c68 <HAL_GPIO_Init+0x210>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a52      	ldr	r2, [pc, #328]	@ (8001d80 <HAL_GPIO_Init+0x328>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d013      	beq.n	8001c64 <HAL_GPIO_Init+0x20c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a51      	ldr	r2, [pc, #324]	@ (8001d84 <HAL_GPIO_Init+0x32c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00d      	beq.n	8001c60 <HAL_GPIO_Init+0x208>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a50      	ldr	r2, [pc, #320]	@ (8001d88 <HAL_GPIO_Init+0x330>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d007      	beq.n	8001c5c <HAL_GPIO_Init+0x204>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a4f      	ldr	r2, [pc, #316]	@ (8001d8c <HAL_GPIO_Init+0x334>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_GPIO_Init+0x200>
 8001c54:	2308      	movs	r3, #8
 8001c56:	e010      	b.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c58:	2309      	movs	r3, #9
 8001c5a:	e00e      	b.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	e00c      	b.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c60:	2306      	movs	r3, #6
 8001c62:	e00a      	b.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c64:	2305      	movs	r3, #5
 8001c66:	e008      	b.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e004      	b.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e002      	b.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	f002 0203 	and.w	r2, r2, #3
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	4093      	lsls	r3, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c8c:	4936      	ldr	r1, [pc, #216]	@ (8001d68 <HAL_GPIO_Init+0x310>)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d90 <HAL_GPIO_Init+0x338>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cbe:	4a34      	ldr	r2, [pc, #208]	@ (8001d90 <HAL_GPIO_Init+0x338>)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc4:	4b32      	ldr	r3, [pc, #200]	@ (8001d90 <HAL_GPIO_Init+0x338>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ce8:	4a29      	ldr	r2, [pc, #164]	@ (8001d90 <HAL_GPIO_Init+0x338>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cee:	4b28      	ldr	r3, [pc, #160]	@ (8001d90 <HAL_GPIO_Init+0x338>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d12:	4a1f      	ldr	r2, [pc, #124]	@ (8001d90 <HAL_GPIO_Init+0x338>)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <HAL_GPIO_Init+0x338>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	@ (8001d90 <HAL_GPIO_Init+0x338>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f47f ae88 	bne.w	8001a68 <HAL_GPIO_Init+0x10>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020400 	.word	0x40020400
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40021400 	.word	0x40021400
 8001d84:	40021800 	.word	0x40021800
 8001d88:	40021c00 	.word	0x40021c00
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e101      	b.n	8001fda <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d106      	bne.n	8001df6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff fbc7 	bl	8001584 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e04:	d102      	bne.n	8001e0c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f002 faf2 	bl	80043fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7c1a      	ldrb	r2, [r3, #16]
 8001e1e:	f88d 2000 	strb.w	r2, [sp]
 8001e22:	3304      	adds	r3, #4
 8001e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e26:	f002 fa8f 	bl	8004348 <USB_CoreInit>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0ce      	b.n	8001fda <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 fae9 	bl	800441a <USB_SetCurrentMode>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0bf      	b.n	8001fda <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e04a      	b.n	8001ef6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3315      	adds	r3, #21
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3314      	adds	r3, #20
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	b298      	uxth	r0, r3
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	332e      	adds	r3, #46	@ 0x2e
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	3318      	adds	r3, #24
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	331c      	adds	r3, #28
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3320      	adds	r3, #32
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	3324      	adds	r3, #36	@ 0x24
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	791b      	ldrb	r3, [r3, #4]
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d3af      	bcc.n	8001e60 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e044      	b.n	8001f90 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	791b      	ldrb	r3, [r3, #4]
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d3b5      	bcc.n	8001f06 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7c1a      	ldrb	r2, [r3, #16]
 8001fa2:	f88d 2000 	strb.w	r2, [sp]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001faa:	f002 fa83 	bl	80044b4 <USB_DevInit>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e00c      	b.n	8001fda <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f002 fc48 	bl	8004868 <USB_DevDisconnect>

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	@ 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e23b      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d050      	beq.n	80020a4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002002:	4b9e      	ldr	r3, [pc, #632]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d00c      	beq.n	8002028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200e:	4b9b      	ldr	r3, [pc, #620]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002016:	2b08      	cmp	r3, #8
 8002018:	d112      	bne.n	8002040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201a:	4b98      	ldr	r3, [pc, #608]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002026:	d10b      	bne.n	8002040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	4b94      	ldr	r3, [pc, #592]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d036      	beq.n	80020a2 <HAL_RCC_OscConfig+0xbe>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d132      	bne.n	80020a2 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e216      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4b8e      	ldr	r3, [pc, #568]	@ (8002280 <HAL_RCC_OscConfig+0x29c>)
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d013      	beq.n	800207a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff fbc5 	bl	80017e0 <HAL_GetTick>
 8002056:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205a:	f7ff fbc1 	bl	80017e0 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b64      	cmp	r3, #100	@ 0x64
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e200      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206c:	4b83      	ldr	r3, [pc, #524]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x76>
 8002078:	e014      	b.n	80020a4 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7ff fbb1 	bl	80017e0 <HAL_GetTick>
 800207e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002082:	f7ff fbad 	bl	80017e0 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b64      	cmp	r3, #100	@ 0x64
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e1ec      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002094:	4b79      	ldr	r3, [pc, #484]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f0      	bne.n	8002082 <HAL_RCC_OscConfig+0x9e>
 80020a0:	e000      	b.n	80020a4 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d077      	beq.n	80021a0 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020b0:	4b72      	ldr	r3, [pc, #456]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00b      	beq.n	80020d4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020bc:	4b6f      	ldr	r3, [pc, #444]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d126      	bne.n	8002116 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c8:	4b6c      	ldr	r3, [pc, #432]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d120      	bne.n	8002116 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d4:	4b69      	ldr	r3, [pc, #420]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_OscConfig+0x108>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e1c0      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b63      	ldr	r3, [pc, #396]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	21f8      	movs	r1, #248	@ 0xf8
 80020fa:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	69b9      	ldr	r1, [r7, #24]
 80020fe:	fa91 f1a1 	rbit	r1, r1
 8002102:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002104:	6979      	ldr	r1, [r7, #20]
 8002106:	fab1 f181 	clz	r1, r1
 800210a:	b2c9      	uxtb	r1, r1
 800210c:	408b      	lsls	r3, r1
 800210e:	495b      	ldr	r1, [pc, #364]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002114:	e044      	b.n	80021a0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d02a      	beq.n	8002174 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800211e:	4b59      	ldr	r3, [pc, #356]	@ (8002284 <HAL_RCC_OscConfig+0x2a0>)
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff fb5c 	bl	80017e0 <HAL_GetTick>
 8002128:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff fb58 	bl	80017e0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e197      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	4b4f      	ldr	r3, [pc, #316]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	4b4c      	ldr	r3, [pc, #304]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	21f8      	movs	r1, #248	@ 0xf8
 8002158:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	6939      	ldr	r1, [r7, #16]
 800215c:	fa91 f1a1 	rbit	r1, r1
 8002160:	60f9      	str	r1, [r7, #12]
  return result;
 8002162:	68f9      	ldr	r1, [r7, #12]
 8002164:	fab1 f181 	clz	r1, r1
 8002168:	b2c9      	uxtb	r1, r1
 800216a:	408b      	lsls	r3, r1
 800216c:	4943      	ldr	r1, [pc, #268]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
 8002172:	e015      	b.n	80021a0 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002174:	4b43      	ldr	r3, [pc, #268]	@ (8002284 <HAL_RCC_OscConfig+0x2a0>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff fb31 	bl	80017e0 <HAL_GetTick>
 800217e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002182:	f7ff fb2d 	bl	80017e0 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e16c      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002194:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d030      	beq.n	800220e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d016      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b4:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <HAL_RCC_OscConfig+0x2a4>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7ff fb11 	bl	80017e0 <HAL_GetTick>
 80021be:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c2:	f7ff fb0d 	bl	80017e0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e14c      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d4:	4b29      	ldr	r3, [pc, #164]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 80021d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1de>
 80021e0:	e015      	b.n	800220e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e2:	4b29      	ldr	r3, [pc, #164]	@ (8002288 <HAL_RCC_OscConfig+0x2a4>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7ff fafa 	bl	80017e0 <HAL_GetTick>
 80021ec:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f0:	f7ff faf6 	bl	80017e0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e135      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002202:	4b1e      	ldr	r3, [pc, #120]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 8002204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8087 	beq.w	800232a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b16      	ldr	r3, [pc, #88]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d110      	bne.n	8002250 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	4a11      	ldr	r2, [pc, #68]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	@ 0x40
 800223e:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <HAL_RCC_OscConfig+0x298>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224a:	2301      	movs	r3, #1
 800224c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002250:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <HAL_RCC_OscConfig+0x2a8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <HAL_RCC_OscConfig+0x2a8>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <HAL_RCC_OscConfig+0x2a8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d122      	bne.n	80022ae <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <HAL_RCC_OscConfig+0x2a8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a07      	ldr	r2, [pc, #28]	@ (800228c <HAL_RCC_OscConfig+0x2a8>)
 800226e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002272:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002274:	f7ff fab4 	bl	80017e0 <HAL_GetTick>
 8002278:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	e012      	b.n	80022a2 <HAL_RCC_OscConfig+0x2be>
 800227c:	40023800 	.word	0x40023800
 8002280:	40023802 	.word	0x40023802
 8002284:	42470000 	.word	0x42470000
 8002288:	42470e80 	.word	0x42470e80
 800228c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002290:	f7ff faa6 	bl	80017e0 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e0e5      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b75      	ldr	r3, [pc, #468]	@ (8002478 <HAL_RCC_OscConfig+0x494>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	4b72      	ldr	r3, [pc, #456]	@ (800247c <HAL_RCC_OscConfig+0x498>)
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d015      	beq.n	80022ec <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7ff fa8e 	bl	80017e0 <HAL_GetTick>
 80022c4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c6:	e00a      	b.n	80022de <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7ff fa8a 	bl	80017e0 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e0c7      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022de:	4b68      	ldr	r3, [pc, #416]	@ (8002480 <HAL_RCC_OscConfig+0x49c>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0ee      	beq.n	80022c8 <HAL_RCC_OscConfig+0x2e4>
 80022ea:	e014      	b.n	8002316 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7ff fa78 	bl	80017e0 <HAL_GetTick>
 80022f0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7ff fa74 	bl	80017e0 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e0b1      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230a:	4b5d      	ldr	r3, [pc, #372]	@ (8002480 <HAL_RCC_OscConfig+0x49c>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ee      	bne.n	80022f4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002316:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800231a:	2b01      	cmp	r3, #1
 800231c:	d105      	bne.n	800232a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231e:	4b58      	ldr	r3, [pc, #352]	@ (8002480 <HAL_RCC_OscConfig+0x49c>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	4a57      	ldr	r2, [pc, #348]	@ (8002480 <HAL_RCC_OscConfig+0x49c>)
 8002324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 809c 	beq.w	800246c <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002334:	4b52      	ldr	r3, [pc, #328]	@ (8002480 <HAL_RCC_OscConfig+0x49c>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d061      	beq.n	8002404 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d146      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002348:	4b4e      	ldr	r3, [pc, #312]	@ (8002484 <HAL_RCC_OscConfig+0x4a0>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7ff fa47 	bl	80017e0 <HAL_GetTick>
 8002352:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002356:	f7ff fa43 	bl	80017e0 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b64      	cmp	r3, #100	@ 0x64
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e082      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002368:	4b45      	ldr	r3, [pc, #276]	@ (8002480 <HAL_RCC_OscConfig+0x49c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f0      	bne.n	8002356 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002374:	4b42      	ldr	r3, [pc, #264]	@ (8002480 <HAL_RCC_OscConfig+0x49c>)
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	4b43      	ldr	r3, [pc, #268]	@ (8002488 <HAL_RCC_OscConfig+0x4a4>)
 800237a:	4013      	ands	r3, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	69d1      	ldr	r1, [r2, #28]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6a12      	ldr	r2, [r2, #32]
 8002384:	4311      	orrs	r1, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800238a:	0192      	lsls	r2, r2, #6
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002392:	0612      	lsls	r2, r2, #24
 8002394:	4311      	orrs	r1, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800239a:	0852      	lsrs	r2, r2, #1
 800239c:	3a01      	subs	r2, #1
 800239e:	0412      	lsls	r2, r2, #16
 80023a0:	430a      	orrs	r2, r1
 80023a2:	4937      	ldr	r1, [pc, #220]	@ (8002480 <HAL_RCC_OscConfig+0x49c>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a8:	4b36      	ldr	r3, [pc, #216]	@ (8002484 <HAL_RCC_OscConfig+0x4a0>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7ff fa17 	bl	80017e0 <HAL_GetTick>
 80023b2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b6:	f7ff fa13 	bl	80017e0 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b64      	cmp	r3, #100	@ 0x64
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e052      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002480 <HAL_RCC_OscConfig+0x49c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x3d2>
 80023d4:	e04a      	b.n	800246c <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002484 <HAL_RCC_OscConfig+0x4a0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff fa00 	bl	80017e0 <HAL_GetTick>
 80023e0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e4:	f7ff f9fc 	bl	80017e0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	@ 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e03b      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f6:	4b22      	ldr	r3, [pc, #136]	@ (8002480 <HAL_RCC_OscConfig+0x49c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x400>
 8002402:	e033      	b.n	800246c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e02e      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002410:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <HAL_RCC_OscConfig+0x49c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	429a      	cmp	r2, r3
 8002422:	d121      	bne.n	8002468 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d11a      	bne.n	8002468 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002438:	4013      	ands	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800243e:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002440:	4293      	cmp	r3, r2
 8002442:	d111      	bne.n	8002468 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244e:	085b      	lsrs	r3, r3, #1
 8002450:	3b01      	subs	r3, #1
 8002452:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d107      	bne.n	8002468 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002462:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3728      	adds	r7, #40	@ 0x28
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40007000 	.word	0x40007000
 800247c:	40023870 	.word	0x40023870
 8002480:	40023800 	.word	0x40023800
 8002484:	42470060 	.word	0x42470060
 8002488:	f0bc8000 	.word	0xf0bc8000

0800248c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0d2      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d90c      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b68      	ldr	r3, [pc, #416]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b66      	ldr	r3, [pc, #408]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0be      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a5b      	ldr	r2, [pc, #364]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 80024e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80024f8:	4b56      	ldr	r3, [pc, #344]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a55      	ldr	r2, [pc, #340]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 80024fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002502:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b53      	ldr	r3, [pc, #332]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4950      	ldr	r1, [pc, #320]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d040      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b4a      	ldr	r3, [pc, #296]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d115      	bne.n	8002562 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e085      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4b44      	ldr	r3, [pc, #272]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e079      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4b40      	ldr	r3, [pc, #256]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e071      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b3c      	ldr	r3, [pc, #240]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4939      	ldr	r1, [pc, #228]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002574:	f7ff f934 	bl	80017e0 <HAL_GetTick>
 8002578:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7ff f930 	bl	80017e0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e059      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b30      	ldr	r3, [pc, #192]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d20c      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b27      	ldr	r3, [pc, #156]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b25      	ldr	r3, [pc, #148]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e03c      	b.n	8002646 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	491b      	ldr	r1, [pc, #108]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f6:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4913      	ldr	r1, [pc, #76]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800260a:	f000 f82b 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 800260e:	4601      	mov	r1, r0
 8002610:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002618:	22f0      	movs	r2, #240	@ 0xf0
 800261a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	fa92 f2a2 	rbit	r2, r2
 8002622:	60fa      	str	r2, [r7, #12]
  return result;
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	fab2 f282 	clz	r2, r2
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	40d3      	lsrs	r3, r2
 800262e:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <HAL_RCC_ClockConfig+0x1cc>)
 8002630:	5cd3      	ldrb	r3, [r2, r3]
 8002632:	fa21 f303 	lsr.w	r3, r1, r3
 8002636:	4a09      	ldr	r2, [pc, #36]	@ (800265c <HAL_RCC_ClockConfig+0x1d0>)
 8002638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800263a:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <HAL_RCC_ClockConfig+0x1d4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff f88c 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00
 8002654:	40023800 	.word	0x40023800
 8002658:	08004994 	.word	0x08004994
 800265c:	20000000 	.word	0x20000000
 8002660:	20000004 	.word	0x20000004

08002664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002668:	b094      	sub	sp, #80	@ 0x50
 800266a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002670:	2300      	movs	r3, #0
 8002672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002674:	2300      	movs	r3, #0
 8002676:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800267c:	4b7c      	ldr	r3, [pc, #496]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x20c>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b08      	cmp	r3, #8
 8002686:	d00d      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002688:	2b08      	cmp	r3, #8
 800268a:	f200 80e7 	bhi.w	800285c <HAL_RCC_GetSysClockFreq+0x1f8>
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x34>
 8002692:	2b04      	cmp	r3, #4
 8002694:	d003      	beq.n	800269e <HAL_RCC_GetSysClockFreq+0x3a>
 8002696:	e0e1      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002698:	4b76      	ldr	r3, [pc, #472]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x210>)
 800269a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800269c:	e0e1      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800269e:	4b76      	ldr	r3, [pc, #472]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x214>)
 80026a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026a2:	e0de      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a4:	4b72      	ldr	r3, [pc, #456]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x20c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ae:	4b70      	ldr	r3, [pc, #448]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x20c>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d065      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x20c>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	099b      	lsrs	r3, r3, #6
 80026c0:	2200      	movs	r2, #0
 80026c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80026c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80026ce:	2300      	movs	r3, #0
 80026d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80026d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80026d6:	4622      	mov	r2, r4
 80026d8:	462b      	mov	r3, r5
 80026da:	f04f 0000 	mov.w	r0, #0
 80026de:	f04f 0100 	mov.w	r1, #0
 80026e2:	0159      	lsls	r1, r3, #5
 80026e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026e8:	0150      	lsls	r0, r2, #5
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4621      	mov	r1, r4
 80026f0:	1a51      	subs	r1, r2, r1
 80026f2:	6139      	str	r1, [r7, #16]
 80026f4:	4629      	mov	r1, r5
 80026f6:	eb63 0301 	sbc.w	r3, r3, r1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002708:	4659      	mov	r1, fp
 800270a:	018b      	lsls	r3, r1, #6
 800270c:	4651      	mov	r1, sl
 800270e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002712:	4651      	mov	r1, sl
 8002714:	018a      	lsls	r2, r1, #6
 8002716:	46d4      	mov	ip, sl
 8002718:	ebb2 080c 	subs.w	r8, r2, ip
 800271c:	4659      	mov	r1, fp
 800271e:	eb63 0901 	sbc.w	r9, r3, r1
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800272e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002736:	4690      	mov	r8, r2
 8002738:	4699      	mov	r9, r3
 800273a:	4623      	mov	r3, r4
 800273c:	eb18 0303 	adds.w	r3, r8, r3
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	462b      	mov	r3, r5
 8002744:	eb49 0303 	adc.w	r3, r9, r3
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002756:	4629      	mov	r1, r5
 8002758:	024b      	lsls	r3, r1, #9
 800275a:	4620      	mov	r0, r4
 800275c:	4629      	mov	r1, r5
 800275e:	4604      	mov	r4, r0
 8002760:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002764:	4601      	mov	r1, r0
 8002766:	024a      	lsls	r2, r1, #9
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800276e:	2200      	movs	r2, #0
 8002770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002778:	f7fd ffa8 	bl	80006cc <__aeabi_uldivmod>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4613      	mov	r3, r2
 8002782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002784:	e05c      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002786:	4b3a      	ldr	r3, [pc, #232]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	2200      	movs	r2, #0
 800278e:	4618      	mov	r0, r3
 8002790:	4611      	mov	r1, r2
 8002792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002796:	623b      	str	r3, [r7, #32]
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
 800279c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027a0:	4642      	mov	r2, r8
 80027a2:	464b      	mov	r3, r9
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	0159      	lsls	r1, r3, #5
 80027ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b2:	0150      	lsls	r0, r2, #5
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	46c4      	mov	ip, r8
 80027ba:	ebb2 0a0c 	subs.w	sl, r2, ip
 80027be:	4640      	mov	r0, r8
 80027c0:	4649      	mov	r1, r9
 80027c2:	468c      	mov	ip, r1
 80027c4:	eb63 0b0c 	sbc.w	fp, r3, ip
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027dc:	ebb2 040a 	subs.w	r4, r2, sl
 80027e0:	eb63 050b 	sbc.w	r5, r3, fp
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	00eb      	lsls	r3, r5, #3
 80027ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027f2:	00e2      	lsls	r2, r4, #3
 80027f4:	4614      	mov	r4, r2
 80027f6:	461d      	mov	r5, r3
 80027f8:	4603      	mov	r3, r0
 80027fa:	18e3      	adds	r3, r4, r3
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	460b      	mov	r3, r1
 8002800:	eb45 0303 	adc.w	r3, r5, r3
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002812:	4629      	mov	r1, r5
 8002814:	028b      	lsls	r3, r1, #10
 8002816:	4620      	mov	r0, r4
 8002818:	4629      	mov	r1, r5
 800281a:	4604      	mov	r4, r0
 800281c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002820:	4601      	mov	r1, r0
 8002822:	028a      	lsls	r2, r1, #10
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800282a:	2200      	movs	r2, #0
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	61fa      	str	r2, [r7, #28]
 8002830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002834:	f7fd ff4a 	bl	80006cc <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4613      	mov	r3, r2
 800283e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002840:	4b0b      	ldr	r3, [pc, #44]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	3301      	adds	r3, #1
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002850:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800285a:	e002      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800285c:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x210>)
 800285e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002864:	4618      	mov	r0, r3
 8002866:	3750      	adds	r7, #80	@ 0x50
 8002868:	46bd      	mov	sp, r7
 800286a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	00f42400 	.word	0x00f42400
 8002878:	007a1200 	.word	0x007a1200

0800287c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002880:	4b02      	ldr	r3, [pc, #8]	@ (800288c <HAL_RCC_GetHCLKFreq+0x10>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	20000000 	.word	0x20000000

08002890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002896:	f7ff fff1 	bl	800287c <HAL_RCC_GetHCLKFreq>
 800289a:	4601      	mov	r1, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80028a4:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 80028a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	fa92 f2a2 	rbit	r2, r2
 80028b0:	603a      	str	r2, [r7, #0]
  return result;
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	fab2 f282 	clz	r2, r2
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	40d3      	lsrs	r3, r2
 80028bc:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	080049a4 	.word	0x080049a4

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80028da:	f7ff ffcf 	bl	800287c <HAL_RCC_GetHCLKFreq>
 80028de:	4601      	mov	r1, r0
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80028e8:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80028ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	fa92 f2a2 	rbit	r2, r2
 80028f4:	603a      	str	r2, [r7, #0]
  return result;
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	fab2 f282 	clz	r2, r2
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	40d3      	lsrs	r3, r2
 8002900:	4a04      	ldr	r2, [pc, #16]	@ (8002914 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002902:	5cd3      	ldrb	r3, [r2, r3]
 8002904:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40023800 	.word	0x40023800
 8002914:	080049a4 	.word	0x080049a4

08002918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e041      	b.n	80029ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fcf0 	bl	8001324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 fefa 	bl	8003750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e041      	b.n	8002a4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f839 	bl	8002a54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f000 feab 	bl	8003750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <HAL_TIM_PWM_Start+0x24>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e022      	b.n	8002ad2 <HAL_TIM_PWM_Start+0x6a>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d109      	bne.n	8002aa6 <HAL_TIM_PWM_Start+0x3e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	bf14      	ite	ne
 8002a9e:	2301      	movne	r3, #1
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	e015      	b.n	8002ad2 <HAL_TIM_PWM_Start+0x6a>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d109      	bne.n	8002ac0 <HAL_TIM_PWM_Start+0x58>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e008      	b.n	8002ad2 <HAL_TIM_PWM_Start+0x6a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e07c      	b.n	8002bd4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <HAL_TIM_PWM_Start+0x82>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ae8:	e013      	b.n	8002b12 <HAL_TIM_PWM_Start+0xaa>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d104      	bne.n	8002afa <HAL_TIM_PWM_Start+0x92>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002af8:	e00b      	b.n	8002b12 <HAL_TIM_PWM_Start+0xaa>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_PWM_Start+0xa2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b08:	e003      	b.n	8002b12 <HAL_TIM_PWM_Start+0xaa>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2201      	movs	r2, #1
 8002b18:	6839      	ldr	r1, [r7, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 fa29 	bl	8003f72 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2d      	ldr	r2, [pc, #180]	@ (8002bdc <HAL_TIM_PWM_Start+0x174>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d004      	beq.n	8002b34 <HAL_TIM_PWM_Start+0xcc>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002be0 <HAL_TIM_PWM_Start+0x178>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_TIM_PWM_Start+0xd0>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <HAL_TIM_PWM_Start+0xd2>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a22      	ldr	r2, [pc, #136]	@ (8002bdc <HAL_TIM_PWM_Start+0x174>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d022      	beq.n	8002b9e <HAL_TIM_PWM_Start+0x136>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b60:	d01d      	beq.n	8002b9e <HAL_TIM_PWM_Start+0x136>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1f      	ldr	r2, [pc, #124]	@ (8002be4 <HAL_TIM_PWM_Start+0x17c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d018      	beq.n	8002b9e <HAL_TIM_PWM_Start+0x136>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <HAL_TIM_PWM_Start+0x180>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_TIM_PWM_Start+0x136>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bec <HAL_TIM_PWM_Start+0x184>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00e      	beq.n	8002b9e <HAL_TIM_PWM_Start+0x136>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a16      	ldr	r2, [pc, #88]	@ (8002be0 <HAL_TIM_PWM_Start+0x178>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d009      	beq.n	8002b9e <HAL_TIM_PWM_Start+0x136>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a18      	ldr	r2, [pc, #96]	@ (8002bf0 <HAL_TIM_PWM_Start+0x188>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d004      	beq.n	8002b9e <HAL_TIM_PWM_Start+0x136>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a16      	ldr	r2, [pc, #88]	@ (8002bf4 <HAL_TIM_PWM_Start+0x18c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d111      	bne.n	8002bc2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b06      	cmp	r3, #6
 8002bae:	d010      	beq.n	8002bd2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc0:	e007      	b.n	8002bd2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40010400 	.word	0x40010400
 8002be4:	40000400 	.word	0x40000400
 8002be8:	40000800 	.word	0x40000800
 8002bec:	40000c00 	.word	0x40000c00
 8002bf0:	40014000 	.word	0x40014000
 8002bf4:	40001800 	.word	0x40001800

08002bf8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e041      	b.n	8002c8e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f839 	bl	8002c96 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f000 fd8a 	bl	8003750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <HAL_TIM_IC_Start_IT+0x1e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	e013      	b.n	8002cee <HAL_TIM_IC_Start_IT+0x46>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIM_IC_Start_IT+0x2e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	e00b      	b.n	8002cee <HAL_TIM_IC_Start_IT+0x46>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_IC_Start_IT+0x3e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e003      	b.n	8002cee <HAL_TIM_IC_Start_IT+0x46>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <HAL_TIM_IC_Start_IT+0x58>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e013      	b.n	8002d28 <HAL_TIM_IC_Start_IT+0x80>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d104      	bne.n	8002d10 <HAL_TIM_IC_Start_IT+0x68>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e00b      	b.n	8002d28 <HAL_TIM_IC_Start_IT+0x80>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d104      	bne.n	8002d20 <HAL_TIM_IC_Start_IT+0x78>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e003      	b.n	8002d28 <HAL_TIM_IC_Start_IT+0x80>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d2a:	7bbb      	ldrb	r3, [r7, #14]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d102      	bne.n	8002d36 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d30:	7b7b      	ldrb	r3, [r7, #13]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d001      	beq.n	8002d3a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0cc      	b.n	8002ed4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_IC_Start_IT+0xa2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d48:	e013      	b.n	8002d72 <HAL_TIM_IC_Start_IT+0xca>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_IC_Start_IT+0xb2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d58:	e00b      	b.n	8002d72 <HAL_TIM_IC_Start_IT+0xca>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_IC_Start_IT+0xc2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d68:	e003      	b.n	8002d72 <HAL_TIM_IC_Start_IT+0xca>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <HAL_TIM_IC_Start_IT+0xda>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d80:	e013      	b.n	8002daa <HAL_TIM_IC_Start_IT+0x102>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_IC_Start_IT+0xea>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d90:	e00b      	b.n	8002daa <HAL_TIM_IC_Start_IT+0x102>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_IC_Start_IT+0xfa>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002da0:	e003      	b.n	8002daa <HAL_TIM_IC_Start_IT+0x102>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d841      	bhi.n	8002e34 <HAL_TIM_IC_Start_IT+0x18c>
 8002db0:	a201      	add	r2, pc, #4	@ (adr r2, 8002db8 <HAL_TIM_IC_Start_IT+0x110>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002ded 	.word	0x08002ded
 8002dbc:	08002e35 	.word	0x08002e35
 8002dc0:	08002e35 	.word	0x08002e35
 8002dc4:	08002e35 	.word	0x08002e35
 8002dc8:	08002dff 	.word	0x08002dff
 8002dcc:	08002e35 	.word	0x08002e35
 8002dd0:	08002e35 	.word	0x08002e35
 8002dd4:	08002e35 	.word	0x08002e35
 8002dd8:	08002e11 	.word	0x08002e11
 8002ddc:	08002e35 	.word	0x08002e35
 8002de0:	08002e35 	.word	0x08002e35
 8002de4:	08002e35 	.word	0x08002e35
 8002de8:	08002e23 	.word	0x08002e23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0202 	orr.w	r2, r2, #2
 8002dfa:	60da      	str	r2, [r3, #12]
      break;
 8002dfc:	e01d      	b.n	8002e3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0204 	orr.w	r2, r2, #4
 8002e0c:	60da      	str	r2, [r3, #12]
      break;
 8002e0e:	e014      	b.n	8002e3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0208 	orr.w	r2, r2, #8
 8002e1e:	60da      	str	r2, [r3, #12]
      break;
 8002e20:	e00b      	b.n	8002e3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0210 	orr.w	r2, r2, #16
 8002e30:	60da      	str	r2, [r3, #12]
      break;
 8002e32:	e002      	b.n	8002e3a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d148      	bne.n	8002ed2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	6839      	ldr	r1, [r7, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 f892 	bl	8003f72 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a22      	ldr	r2, [pc, #136]	@ (8002edc <HAL_TIM_IC_Start_IT+0x234>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e60:	d01d      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee0 <HAL_TIM_IC_Start_IT+0x238>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee4 <HAL_TIM_IC_Start_IT+0x23c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee8 <HAL_TIM_IC_Start_IT+0x240>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a19      	ldr	r2, [pc, #100]	@ (8002eec <HAL_TIM_IC_Start_IT+0x244>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a18      	ldr	r2, [pc, #96]	@ (8002ef0 <HAL_TIM_IC_Start_IT+0x248>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a16      	ldr	r2, [pc, #88]	@ (8002ef4 <HAL_TIM_IC_Start_IT+0x24c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d111      	bne.n	8002ec2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b06      	cmp	r3, #6
 8002eae:	d010      	beq.n	8002ed2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec0:	e007      	b.n	8002ed2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	40010400 	.word	0x40010400
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40001800 	.word	0x40001800

08002ef8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b0c      	cmp	r3, #12
 8002f0a:	d841      	bhi.n	8002f90 <HAL_TIM_IC_Stop_IT+0x98>
 8002f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f14 <HAL_TIM_IC_Stop_IT+0x1c>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f49 	.word	0x08002f49
 8002f18:	08002f91 	.word	0x08002f91
 8002f1c:	08002f91 	.word	0x08002f91
 8002f20:	08002f91 	.word	0x08002f91
 8002f24:	08002f5b 	.word	0x08002f5b
 8002f28:	08002f91 	.word	0x08002f91
 8002f2c:	08002f91 	.word	0x08002f91
 8002f30:	08002f91 	.word	0x08002f91
 8002f34:	08002f6d 	.word	0x08002f6d
 8002f38:	08002f91 	.word	0x08002f91
 8002f3c:	08002f91 	.word	0x08002f91
 8002f40:	08002f91 	.word	0x08002f91
 8002f44:	08002f7f 	.word	0x08002f7f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0202 	bic.w	r2, r2, #2
 8002f56:	60da      	str	r2, [r3, #12]
      break;
 8002f58:	e01d      	b.n	8002f96 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0204 	bic.w	r2, r2, #4
 8002f68:	60da      	str	r2, [r3, #12]
      break;
 8002f6a:	e014      	b.n	8002f96 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0208 	bic.w	r2, r2, #8
 8002f7a:	60da      	str	r2, [r3, #12]
      break;
 8002f7c:	e00b      	b.n	8002f96 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0210 	bic.w	r2, r2, #16
 8002f8c:	60da      	str	r2, [r3, #12]
      break;
 8002f8e:	e002      	b.n	8002f96 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
      break;
 8002f94:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d156      	bne.n	800304a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	6839      	ldr	r1, [r7, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 ffe4 	bl	8003f72 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6a1a      	ldr	r2, [r3, #32]
 8002fb0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <HAL_TIM_IC_Stop_IT+0xe2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a1a      	ldr	r2, [r3, #32]
 8002fc0:	f240 4344 	movw	r3, #1092	@ 0x444
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <HAL_TIM_IC_Stop_IT+0xe2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d104      	bne.n	8002fea <HAL_TIM_IC_Stop_IT+0xf2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fe8:	e013      	b.n	8003012 <HAL_TIM_IC_Stop_IT+0x11a>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d104      	bne.n	8002ffa <HAL_TIM_IC_Stop_IT+0x102>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ff8:	e00b      	b.n	8003012 <HAL_TIM_IC_Stop_IT+0x11a>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d104      	bne.n	800300a <HAL_TIM_IC_Stop_IT+0x112>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003008:	e003      	b.n	8003012 <HAL_TIM_IC_Stop_IT+0x11a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <HAL_TIM_IC_Stop_IT+0x12a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003020:	e013      	b.n	800304a <HAL_TIM_IC_Stop_IT+0x152>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d104      	bne.n	8003032 <HAL_TIM_IC_Stop_IT+0x13a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003030:	e00b      	b.n	800304a <HAL_TIM_IC_Stop_IT+0x152>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d104      	bne.n	8003042 <HAL_TIM_IC_Stop_IT+0x14a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003040:	e003      	b.n	800304a <HAL_TIM_IC_Stop_IT+0x152>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800304a:	7bfb      	ldrb	r3, [r7, #15]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d020      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01b      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0202 	mvn.w	r2, #2
 8003088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fc8a 	bl	80009b8 <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fb37 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fb3d 	bl	800372c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d020      	beq.n	8003104 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01b      	beq.n	8003104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0204 	mvn.w	r2, #4
 80030d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2202      	movs	r2, #2
 80030da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd fc64 	bl	80009b8 <HAL_TIM_IC_CaptureCallback>
 80030f0:	e005      	b.n	80030fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fb11 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fb17 	bl	800372c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d020      	beq.n	8003150 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0208 	mvn.w	r2, #8
 8003120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2204      	movs	r2, #4
 8003126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fd fc3e 	bl	80009b8 <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 faeb 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 faf1 	bl	800372c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	d020      	beq.n	800319c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01b      	beq.n	800319c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0210 	mvn.w	r2, #16
 800316c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2208      	movs	r2, #8
 8003172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd fc18 	bl	80009b8 <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fac5 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 facb 	bl	800372c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00c      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0201 	mvn.w	r2, #1
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 faa4 	bl	8003708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00c      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 ff6f 	bl	80040c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00c      	beq.n	8003208 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fa9b 	bl	800373e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00c      	beq.n	800322c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0220 	mvn.w	r2, #32
 8003224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 ff42 	bl	80040b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_TIM_IC_ConfigChannel+0x1e>
 800324e:	2302      	movs	r3, #2
 8003250:	e088      	b.n	8003364 <HAL_TIM_IC_ConfigChannel+0x130>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d11b      	bne.n	8003298 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003270:	f000 fcc4 	bl	8003bfc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 020c 	bic.w	r2, r2, #12
 8003282:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6999      	ldr	r1, [r3, #24]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	619a      	str	r2, [r3, #24]
 8003296:	e060      	b.n	800335a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b04      	cmp	r3, #4
 800329c:	d11c      	bne.n	80032d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80032ae:	f000 fd45 	bl	8003d3c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80032c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6999      	ldr	r1, [r3, #24]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	021a      	lsls	r2, r3, #8
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	619a      	str	r2, [r3, #24]
 80032d6:	e040      	b.n	800335a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d11b      	bne.n	8003316 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80032ee:	f000 fd90 	bl	8003e12 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 020c 	bic.w	r2, r2, #12
 8003300:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69d9      	ldr	r1, [r3, #28]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	61da      	str	r2, [r3, #28]
 8003314:	e021      	b.n	800335a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	d11c      	bne.n	8003356 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800332c:	f000 fdac 	bl	8003e88 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800333e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69d9      	ldr	r1, [r3, #28]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	021a      	lsls	r2, r3, #8
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	61da      	str	r2, [r3, #28]
 8003354:	e001      	b.n	800335a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003362:	7dfb      	ldrb	r3, [r7, #23]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003386:	2302      	movs	r3, #2
 8003388:	e0ae      	b.n	80034e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	f200 809f 	bhi.w	80034d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800339a:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033d5 	.word	0x080033d5
 80033a4:	080034d9 	.word	0x080034d9
 80033a8:	080034d9 	.word	0x080034d9
 80033ac:	080034d9 	.word	0x080034d9
 80033b0:	08003415 	.word	0x08003415
 80033b4:	080034d9 	.word	0x080034d9
 80033b8:	080034d9 	.word	0x080034d9
 80033bc:	080034d9 	.word	0x080034d9
 80033c0:	08003457 	.word	0x08003457
 80033c4:	080034d9 	.word	0x080034d9
 80033c8:	080034d9 	.word	0x080034d9
 80033cc:	080034d9 	.word	0x080034d9
 80033d0:	08003497 	.word	0x08003497
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fa62 	bl	80038a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0208 	orr.w	r2, r2, #8
 80033ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0204 	bic.w	r2, r2, #4
 80033fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6999      	ldr	r1, [r3, #24]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	619a      	str	r2, [r3, #24]
      break;
 8003412:	e064      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fab2 	bl	8003984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800342e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800343e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6999      	ldr	r1, [r3, #24]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	619a      	str	r2, [r3, #24]
      break;
 8003454:	e043      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fb05 	bl	8003a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0208 	orr.w	r2, r2, #8
 8003470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0204 	bic.w	r2, r2, #4
 8003480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69d9      	ldr	r1, [r3, #28]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	61da      	str	r2, [r3, #28]
      break;
 8003494:	e023      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fb59 	bl	8003b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	021a      	lsls	r2, r3, #8
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	61da      	str	r2, [r3, #28]
      break;
 80034d6:	e002      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	75fb      	strb	r3, [r7, #23]
      break;
 80034dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_TIM_ConfigClockSource+0x1c>
 8003508:	2302      	movs	r3, #2
 800350a:	e0b4      	b.n	8003676 <HAL_TIM_ConfigClockSource+0x186>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800352a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003544:	d03e      	beq.n	80035c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800354a:	f200 8087 	bhi.w	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800354e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003552:	f000 8086 	beq.w	8003662 <HAL_TIM_ConfigClockSource+0x172>
 8003556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800355a:	d87f      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800355c:	2b70      	cmp	r3, #112	@ 0x70
 800355e:	d01a      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0xa6>
 8003560:	2b70      	cmp	r3, #112	@ 0x70
 8003562:	d87b      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 8003564:	2b60      	cmp	r3, #96	@ 0x60
 8003566:	d050      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x11a>
 8003568:	2b60      	cmp	r3, #96	@ 0x60
 800356a:	d877      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800356c:	2b50      	cmp	r3, #80	@ 0x50
 800356e:	d03c      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0xfa>
 8003570:	2b50      	cmp	r3, #80	@ 0x50
 8003572:	d873      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 8003574:	2b40      	cmp	r3, #64	@ 0x40
 8003576:	d058      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x13a>
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	d86f      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b30      	cmp	r3, #48	@ 0x30
 800357e:	d064      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003580:	2b30      	cmp	r3, #48	@ 0x30
 8003582:	d86b      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b20      	cmp	r3, #32
 8003586:	d060      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003588:	2b20      	cmp	r3, #32
 800358a:	d867      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05c      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003590:	2b10      	cmp	r3, #16
 8003592:	d05a      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003594:	e062      	b.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035a6:	f000 fcc5 	bl	8003f34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	609a      	str	r2, [r3, #8]
      break;
 80035c2:	e04f      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035d4:	f000 fcae 	bl	8003f34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035e6:	609a      	str	r2, [r3, #8]
      break;
 80035e8:	e03c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f6:	461a      	mov	r2, r3
 80035f8:	f000 fb72 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2150      	movs	r1, #80	@ 0x50
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fc7c 	bl	8003f00 <TIM_ITRx_SetConfig>
      break;
 8003608:	e02c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003616:	461a      	mov	r2, r3
 8003618:	f000 fbcc 	bl	8003db4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2160      	movs	r1, #96	@ 0x60
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fc6c 	bl	8003f00 <TIM_ITRx_SetConfig>
      break;
 8003628:	e01c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003636:	461a      	mov	r2, r3
 8003638:	f000 fb52 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2140      	movs	r1, #64	@ 0x40
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fc5c 	bl	8003f00 <TIM_ITRx_SetConfig>
      break;
 8003648:	e00c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f000 fc53 	bl	8003f00 <TIM_ITRx_SetConfig>
      break;
 800365a:	e003      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	e000      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b0c      	cmp	r3, #12
 8003692:	d831      	bhi.n	80036f8 <HAL_TIM_ReadCapturedValue+0x78>
 8003694:	a201      	add	r2, pc, #4	@ (adr r2, 800369c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036d1 	.word	0x080036d1
 80036a0:	080036f9 	.word	0x080036f9
 80036a4:	080036f9 	.word	0x080036f9
 80036a8:	080036f9 	.word	0x080036f9
 80036ac:	080036db 	.word	0x080036db
 80036b0:	080036f9 	.word	0x080036f9
 80036b4:	080036f9 	.word	0x080036f9
 80036b8:	080036f9 	.word	0x080036f9
 80036bc:	080036e5 	.word	0x080036e5
 80036c0:	080036f9 	.word	0x080036f9
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	080036f9 	.word	0x080036f9
 80036cc:	080036ef 	.word	0x080036ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d6:	60fb      	str	r3, [r7, #12]

      break;
 80036d8:	e00f      	b.n	80036fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	60fb      	str	r3, [r7, #12]

      break;
 80036e2:	e00a      	b.n	80036fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ea:	60fb      	str	r3, [r7, #12]

      break;
 80036ec:	e005      	b.n	80036fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	60fb      	str	r3, [r7, #12]

      break;
 80036f6:	e000      	b.n	80036fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80036f8:	bf00      	nop
  }

  return tmpreg;
 80036fa:	68fb      	ldr	r3, [r7, #12]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop

08003708 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a45      	ldr	r2, [pc, #276]	@ (8003878 <TIM_Base_SetConfig+0x128>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376e:	d00f      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a42      	ldr	r2, [pc, #264]	@ (800387c <TIM_Base_SetConfig+0x12c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00b      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a41      	ldr	r2, [pc, #260]	@ (8003880 <TIM_Base_SetConfig+0x130>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d007      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a40      	ldr	r2, [pc, #256]	@ (8003884 <TIM_Base_SetConfig+0x134>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a3f      	ldr	r2, [pc, #252]	@ (8003888 <TIM_Base_SetConfig+0x138>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d108      	bne.n	80037a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a34      	ldr	r2, [pc, #208]	@ (8003878 <TIM_Base_SetConfig+0x128>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d02b      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b0:	d027      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a31      	ldr	r2, [pc, #196]	@ (800387c <TIM_Base_SetConfig+0x12c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d023      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a30      	ldr	r2, [pc, #192]	@ (8003880 <TIM_Base_SetConfig+0x130>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01f      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003884 <TIM_Base_SetConfig+0x134>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01b      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003888 <TIM_Base_SetConfig+0x138>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d017      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a2d      	ldr	r2, [pc, #180]	@ (800388c <TIM_Base_SetConfig+0x13c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003890 <TIM_Base_SetConfig+0x140>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00f      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003894 <TIM_Base_SetConfig+0x144>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00b      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003898 <TIM_Base_SetConfig+0x148>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a29      	ldr	r2, [pc, #164]	@ (800389c <TIM_Base_SetConfig+0x14c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a28      	ldr	r2, [pc, #160]	@ (80038a0 <TIM_Base_SetConfig+0x150>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d108      	bne.n	8003814 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <TIM_Base_SetConfig+0x128>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d003      	beq.n	8003848 <TIM_Base_SetConfig+0xf8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a11      	ldr	r2, [pc, #68]	@ (8003888 <TIM_Base_SetConfig+0x138>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d103      	bne.n	8003850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d105      	bne.n	800386e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f023 0201 	bic.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	611a      	str	r2, [r3, #16]
  }
}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	40010000 	.word	0x40010000
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800
 8003884:	40000c00 	.word	0x40000c00
 8003888:	40010400 	.word	0x40010400
 800388c:	40014000 	.word	0x40014000
 8003890:	40014400 	.word	0x40014400
 8003894:	40014800 	.word	0x40014800
 8003898:	40001800 	.word	0x40001800
 800389c:	40001c00 	.word	0x40001c00
 80038a0:	40002000 	.word	0x40002000

080038a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f023 0201 	bic.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f023 0302 	bic.w	r3, r3, #2
 80038ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a20      	ldr	r2, [pc, #128]	@ (800397c <TIM_OC1_SetConfig+0xd8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d003      	beq.n	8003908 <TIM_OC1_SetConfig+0x64>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a1f      	ldr	r2, [pc, #124]	@ (8003980 <TIM_OC1_SetConfig+0xdc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d10c      	bne.n	8003922 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f023 0308 	bic.w	r3, r3, #8
 800390e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f023 0304 	bic.w	r3, r3, #4
 8003920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a15      	ldr	r2, [pc, #84]	@ (800397c <TIM_OC1_SetConfig+0xd8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d003      	beq.n	8003932 <TIM_OC1_SetConfig+0x8e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a14      	ldr	r2, [pc, #80]	@ (8003980 <TIM_OC1_SetConfig+0xdc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d111      	bne.n	8003956 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40010000 	.word	0x40010000
 8003980:	40010400 	.word	0x40010400

08003984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f023 0210 	bic.w	r2, r3, #16
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f023 0320 	bic.w	r3, r3, #32
 80039ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a21      	ldr	r2, [pc, #132]	@ (8003a64 <TIM_OC2_SetConfig+0xe0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_OC2_SetConfig+0x68>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a20      	ldr	r2, [pc, #128]	@ (8003a68 <TIM_OC2_SetConfig+0xe4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d10d      	bne.n	8003a08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a16      	ldr	r2, [pc, #88]	@ (8003a64 <TIM_OC2_SetConfig+0xe0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_OC2_SetConfig+0x94>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a15      	ldr	r2, [pc, #84]	@ (8003a68 <TIM_OC2_SetConfig+0xe4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d113      	bne.n	8003a40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	621a      	str	r2, [r3, #32]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40010400 	.word	0x40010400

08003a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0303 	bic.w	r3, r3, #3
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a21      	ldr	r2, [pc, #132]	@ (8003b4c <TIM_OC3_SetConfig+0xe0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_OC3_SetConfig+0x66>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a20      	ldr	r2, [pc, #128]	@ (8003b50 <TIM_OC3_SetConfig+0xe4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d10d      	bne.n	8003aee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a16      	ldr	r2, [pc, #88]	@ (8003b4c <TIM_OC3_SetConfig+0xe0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_OC3_SetConfig+0x92>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a15      	ldr	r2, [pc, #84]	@ (8003b50 <TIM_OC3_SetConfig+0xe4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d113      	bne.n	8003b26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	621a      	str	r2, [r3, #32]
}
 8003b40:	bf00      	nop
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	40010400 	.word	0x40010400

08003b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	031b      	lsls	r3, r3, #12
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a11      	ldr	r2, [pc, #68]	@ (8003bf4 <TIM_OC4_SetConfig+0xa0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d003      	beq.n	8003bbc <TIM_OC4_SetConfig+0x68>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a10      	ldr	r2, [pc, #64]	@ (8003bf8 <TIM_OC4_SetConfig+0xa4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d109      	bne.n	8003bd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	40010400 	.word	0x40010400

08003bfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f023 0201 	bic.w	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a27      	ldr	r2, [pc, #156]	@ (8003cc4 <TIM_TI1_SetConfig+0xc8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01b      	beq.n	8003c62 <TIM_TI1_SetConfig+0x66>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c30:	d017      	beq.n	8003c62 <TIM_TI1_SetConfig+0x66>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a24      	ldr	r2, [pc, #144]	@ (8003cc8 <TIM_TI1_SetConfig+0xcc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <TIM_TI1_SetConfig+0x66>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4a23      	ldr	r2, [pc, #140]	@ (8003ccc <TIM_TI1_SetConfig+0xd0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00f      	beq.n	8003c62 <TIM_TI1_SetConfig+0x66>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a22      	ldr	r2, [pc, #136]	@ (8003cd0 <TIM_TI1_SetConfig+0xd4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00b      	beq.n	8003c62 <TIM_TI1_SetConfig+0x66>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a21      	ldr	r2, [pc, #132]	@ (8003cd4 <TIM_TI1_SetConfig+0xd8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <TIM_TI1_SetConfig+0x66>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a20      	ldr	r2, [pc, #128]	@ (8003cd8 <TIM_TI1_SetConfig+0xdc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_TI1_SetConfig+0x66>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cdc <TIM_TI1_SetConfig+0xe0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <TIM_TI1_SetConfig+0x6a>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <TIM_TI1_SetConfig+0x6c>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0303 	bic.w	r3, r3, #3
 8003c72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e003      	b.n	8003c86 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f023 030a 	bic.w	r3, r3, #10
 8003ca0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f003 030a 	and.w	r3, r3, #10
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	621a      	str	r2, [r3, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40010400 	.word	0x40010400
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40001800 	.word	0x40001800

08003ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 030a 	bic.w	r3, r3, #10
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f023 0210 	bic.w	r2, r3, #16
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	031b      	lsls	r3, r3, #12
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d8e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	621a      	str	r2, [r3, #32]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f023 0210 	bic.w	r2, r3, #16
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	031b      	lsls	r3, r3, #12
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003df0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	621a      	str	r2, [r3, #32]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b087      	sub	sp, #28
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003e62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ec6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	031b      	lsls	r3, r3, #12
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003eda:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	031b      	lsls	r3, r3, #12
 8003ee0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f043 0307 	orr.w	r3, r3, #7
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	609a      	str	r2, [r3, #8]
}
 8003f2a:	bf00      	nop
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	021a      	lsls	r2, r3, #8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	609a      	str	r2, [r3, #8]
}
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b087      	sub	sp, #28
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2201      	movs	r2, #1
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	401a      	ands	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1a      	ldr	r2, [r3, #32]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003faa:	431a      	orrs	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	621a      	str	r2, [r3, #32]
}
 8003fb0:	bf00      	nop
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr
	...

08003fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e05a      	b.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a20      	ldr	r2, [pc, #128]	@ (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d022      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004020:	d01d      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1c      	ldr	r2, [pc, #112]	@ (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1a      	ldr	r2, [pc, #104]	@ (800409c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a19      	ldr	r2, [pc, #100]	@ (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a17      	ldr	r2, [pc, #92]	@ (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a16      	ldr	r2, [pc, #88]	@ (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a14      	ldr	r2, [pc, #80]	@ (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10c      	bne.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004064:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	4313      	orrs	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	40010000 	.word	0x40010000
 8004098:	40000400 	.word	0x40000400
 800409c:	40000800 	.word	0x40000800
 80040a0:	40000c00 	.word	0x40000c00
 80040a4:	40010400 	.word	0x40010400
 80040a8:	40014000 	.word	0x40014000
 80040ac:	40001800 	.word	0x40001800

080040b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr

080040c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e042      	b.n	800416c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fd f9fa 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2224      	movs	r2, #36	@ 0x24
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f82b 	bl	8004174 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800412c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800413c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800414c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80041b4:	f023 030c 	bic.w	r3, r3, #12
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	430b      	orrs	r3, r1
 80041c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a57      	ldr	r2, [pc, #348]	@ (800433c <UART_SetConfig+0x1c8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <UART_SetConfig+0x78>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a56      	ldr	r2, [pc, #344]	@ (8004340 <UART_SetConfig+0x1cc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d103      	bne.n	80041f4 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041ec:	f7fe fb72 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	e002      	b.n	80041fa <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041f4:	f7fe fb4c 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 80041f8:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004202:	d14c      	bne.n	800429e <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	009a      	lsls	r2, r3, #2
 800420e:	441a      	add	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	4a4a      	ldr	r2, [pc, #296]	@ (8004344 <UART_SetConfig+0x1d0>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	0119      	lsls	r1, r3, #4
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009a      	lsls	r2, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	fbb2 f2f3 	udiv	r2, r2, r3
 800423a:	4b42      	ldr	r3, [pc, #264]	@ (8004344 <UART_SetConfig+0x1d0>)
 800423c:	fba3 0302 	umull	r0, r3, r3, r2
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	2064      	movs	r0, #100	@ 0x64
 8004244:	fb00 f303 	mul.w	r3, r0, r3
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	3332      	adds	r3, #50	@ 0x32
 800424e:	4a3d      	ldr	r2, [pc, #244]	@ (8004344 <UART_SetConfig+0x1d0>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800425c:	4419      	add	r1, r3
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009a      	lsls	r2, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fbb2 f2f3 	udiv	r2, r2, r3
 8004274:	4b33      	ldr	r3, [pc, #204]	@ (8004344 <UART_SetConfig+0x1d0>)
 8004276:	fba3 0302 	umull	r0, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2064      	movs	r0, #100	@ 0x64
 800427e:	fb00 f303 	mul.w	r3, r0, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	3332      	adds	r3, #50	@ 0x32
 8004288:	4a2e      	ldr	r2, [pc, #184]	@ (8004344 <UART_SetConfig+0x1d0>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 0207 	and.w	r2, r3, #7
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	440a      	add	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800429c:	e04a      	b.n	8004334 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009a      	lsls	r2, r3, #2
 80042a8:	441a      	add	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	4a23      	ldr	r2, [pc, #140]	@ (8004344 <UART_SetConfig+0x1d0>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	0119      	lsls	r1, r3, #4
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009a      	lsls	r2, r3, #2
 80042c8:	441a      	add	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004344 <UART_SetConfig+0x1d0>)
 80042d6:	fba3 0302 	umull	r0, r3, r3, r2
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2064      	movs	r0, #100	@ 0x64
 80042de:	fb00 f303 	mul.w	r3, r0, r3
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	3332      	adds	r3, #50	@ 0x32
 80042e8:	4a16      	ldr	r2, [pc, #88]	@ (8004344 <UART_SetConfig+0x1d0>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042f4:	4419      	add	r1, r3
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009a      	lsls	r2, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	fbb2 f2f3 	udiv	r2, r2, r3
 800430c:	4b0d      	ldr	r3, [pc, #52]	@ (8004344 <UART_SetConfig+0x1d0>)
 800430e:	fba3 0302 	umull	r0, r3, r3, r2
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2064      	movs	r0, #100	@ 0x64
 8004316:	fb00 f303 	mul.w	r3, r0, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	3332      	adds	r3, #50	@ 0x32
 8004320:	4a08      	ldr	r2, [pc, #32]	@ (8004344 <UART_SetConfig+0x1d0>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	f003 020f 	and.w	r2, r3, #15
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	440a      	add	r2, r1
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40011000 	.word	0x40011000
 8004340:	40011400 	.word	0x40011400
 8004344:	51eb851f 	.word	0x51eb851f

08004348 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004348:	b084      	sub	sp, #16
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	f107 001c 	add.w	r0, r7, #28
 8004356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800435a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800435e:	2b01      	cmp	r3, #1
 8004360:	d123      	bne.n	80043aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004366:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800438a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800438e:	2b01      	cmp	r3, #1
 8004390:	d105      	bne.n	800439e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa8f 	bl	80048c2 <USB_CoreReset>
 80043a4:	4603      	mov	r3, r0
 80043a6:	73fb      	strb	r3, [r7, #15]
 80043a8:	e010      	b.n	80043cc <USB_CoreInit+0x84>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fa83 	bl	80048c2 <USB_CoreReset>
 80043bc:	4603      	mov	r3, r0
 80043be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80043cc:	7fbb      	ldrb	r3, [r7, #30]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d10b      	bne.n	80043ea <USB_CoreInit+0xa2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f043 0206 	orr.w	r2, r3, #6
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f043 0220 	orr.w	r2, r3, #32
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043f6:	b004      	add	sp, #16
 80043f8:	4770      	bx	lr

080043fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f023 0201 	bic.w	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	460b      	mov	r3, r1
 8004424:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d115      	bne.n	8004468 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004448:	200a      	movs	r0, #10
 800444a:	f7fd f9d3 	bl	80017f4 <HAL_Delay>
      ms += 10U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	330a      	adds	r3, #10
 8004452:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fa27 	bl	80048a8 <USB_GetMode>
 800445a:	4603      	mov	r3, r0
 800445c:	2b01      	cmp	r3, #1
 800445e:	d01e      	beq.n	800449e <USB_SetCurrentMode+0x84>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2bc7      	cmp	r3, #199	@ 0xc7
 8004464:	d9f0      	bls.n	8004448 <USB_SetCurrentMode+0x2e>
 8004466:	e01a      	b.n	800449e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d115      	bne.n	800449a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800447a:	200a      	movs	r0, #10
 800447c:	f7fd f9ba 	bl	80017f4 <HAL_Delay>
      ms += 10U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	330a      	adds	r3, #10
 8004484:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa0e 	bl	80048a8 <USB_GetMode>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <USB_SetCurrentMode+0x84>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2bc7      	cmp	r3, #199	@ 0xc7
 8004496:	d9f0      	bls.n	800447a <USB_SetCurrentMode+0x60>
 8004498:	e001      	b.n	800449e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e005      	b.n	80044aa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2bc8      	cmp	r3, #200	@ 0xc8
 80044a2:	d101      	bne.n	80044a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044b4:	b084      	sub	sp, #16
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b086      	sub	sp, #24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80044c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e009      	b.n	80044e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	3340      	adds	r3, #64	@ 0x40
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	2200      	movs	r2, #0
 80044e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	3301      	adds	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b0e      	cmp	r3, #14
 80044ec:	d9f2      	bls.n	80044d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d11c      	bne.n	8004530 <USB_DevInit+0x7c>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004526:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	639a      	str	r2, [r3, #56]	@ 0x38
 800452e:	e00b      	b.n	8004548 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004534:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800454e:	461a      	mov	r2, r3
 8004550:	2300      	movs	r3, #0
 8004552:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004554:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004558:	2b01      	cmp	r3, #1
 800455a:	d10d      	bne.n	8004578 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800455c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004564:	2100      	movs	r1, #0
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f966 	bl	8004838 <USB_SetDevSpeed>
 800456c:	e008      	b.n	8004580 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800456e:	2101      	movs	r1, #1
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f961 	bl	8004838 <USB_SetDevSpeed>
 8004576:	e003      	b.n	8004580 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004578:	2103      	movs	r1, #3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f95c 	bl	8004838 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004580:	2110      	movs	r1, #16
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8fa 	bl	800477c <USB_FlushTxFifo>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f923 	bl	80047de <USB_FlushRxFifo>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a8:	461a      	mov	r2, r3
 80045aa:	2300      	movs	r3, #0
 80045ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b4:	461a      	mov	r2, r3
 80045b6:	2300      	movs	r3, #0
 80045b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c0:	461a      	mov	r2, r3
 80045c2:	2300      	movs	r3, #0
 80045c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	e043      	b.n	8004654 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045e2:	d118      	bne.n	8004616 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f6:	461a      	mov	r2, r3
 80045f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e013      	b.n	8004628 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800460c:	461a      	mov	r2, r3
 800460e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	e008      	b.n	8004628 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004622:	461a      	mov	r2, r3
 8004624:	2300      	movs	r3, #0
 8004626:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004634:	461a      	mov	r2, r3
 8004636:	2300      	movs	r3, #0
 8004638:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004646:	461a      	mov	r2, r3
 8004648:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800464c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	3301      	adds	r3, #1
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004658:	461a      	mov	r2, r3
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4293      	cmp	r3, r2
 800465e:	d3b5      	bcc.n	80045cc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004660:	2300      	movs	r3, #0
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	e043      	b.n	80046ee <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004678:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800467c:	d118      	bne.n	80046b0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004690:	461a      	mov	r2, r3
 8004692:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	e013      	b.n	80046c2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a6:	461a      	mov	r2, r3
 80046a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e008      	b.n	80046c2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046bc:	461a      	mov	r2, r3
 80046be:	2300      	movs	r3, #0
 80046c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ce:	461a      	mov	r2, r3
 80046d0:	2300      	movs	r3, #0
 80046d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e0:	461a      	mov	r2, r3
 80046e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	3301      	adds	r3, #1
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046f2:	461a      	mov	r2, r3
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d3b5      	bcc.n	8004666 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800470c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800471a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800471c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004720:	2b00      	cmp	r3, #0
 8004722:	d105      	bne.n	8004730 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f043 0210 	orr.w	r2, r3, #16
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699a      	ldr	r2, [r3, #24]
 8004734:	4b10      	ldr	r3, [pc, #64]	@ (8004778 <USB_DevInit+0x2c4>)
 8004736:	4313      	orrs	r3, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800473c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f043 0208 	orr.w	r2, r3, #8
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004750:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004754:	2b01      	cmp	r3, #1
 8004756:	d107      	bne.n	8004768 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004768:	7dfb      	ldrb	r3, [r7, #23]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004774:	b004      	add	sp, #16
 8004776:	4770      	bx	lr
 8004778:	803c3800 	.word	0x803c3800

0800477c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3301      	adds	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004796:	d901      	bls.n	800479c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e01b      	b.n	80047d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	daf2      	bge.n	800478a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	019b      	lsls	r3, r3, #6
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3301      	adds	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047c0:	d901      	bls.n	80047c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e006      	b.n	80047d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d0f0      	beq.n	80047b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3301      	adds	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047f6:	d901      	bls.n	80047fc <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e018      	b.n	800482e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	daf2      	bge.n	80047ea <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2210      	movs	r2, #16
 800480c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3301      	adds	r3, #1
 8004812:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800481a:	d901      	bls.n	8004820 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e006      	b.n	800482e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b10      	cmp	r3, #16
 800482a:	d0f0      	beq.n	800480e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004858:	4313      	orrs	r3, r2
 800485a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004896:	f043 0302 	orr.w	r3, r3, #2
 800489a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f003 0301 	and.w	r3, r3, #1
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3301      	adds	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048da:	d901      	bls.n	80048e0 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e01b      	b.n	8004918 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	daf2      	bge.n	80048ce <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f043 0201 	orr.w	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3301      	adds	r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004904:	d901      	bls.n	800490a <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e006      	b.n	8004918 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d0f0      	beq.n	80048f8 <USB_CoreReset+0x36>

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr

08004922 <memset>:
 8004922:	4603      	mov	r3, r0
 8004924:	4402      	add	r2, r0
 8004926:	4293      	cmp	r3, r2
 8004928:	d100      	bne.n	800492c <memset+0xa>
 800492a:	4770      	bx	lr
 800492c:	f803 1b01 	strb.w	r1, [r3], #1
 8004930:	e7f9      	b.n	8004926 <memset+0x4>
	...

08004934 <__libc_init_array>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	2600      	movs	r6, #0
 8004938:	4d0c      	ldr	r5, [pc, #48]	@ (800496c <__libc_init_array+0x38>)
 800493a:	4c0d      	ldr	r4, [pc, #52]	@ (8004970 <__libc_init_array+0x3c>)
 800493c:	1b64      	subs	r4, r4, r5
 800493e:	10a4      	asrs	r4, r4, #2
 8004940:	42a6      	cmp	r6, r4
 8004942:	d109      	bne.n	8004958 <__libc_init_array+0x24>
 8004944:	f000 f81a 	bl	800497c <_init>
 8004948:	2600      	movs	r6, #0
 800494a:	4d0a      	ldr	r5, [pc, #40]	@ (8004974 <__libc_init_array+0x40>)
 800494c:	4c0a      	ldr	r4, [pc, #40]	@ (8004978 <__libc_init_array+0x44>)
 800494e:	1b64      	subs	r4, r4, r5
 8004950:	10a4      	asrs	r4, r4, #2
 8004952:	42a6      	cmp	r6, r4
 8004954:	d105      	bne.n	8004962 <__libc_init_array+0x2e>
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	f855 3b04 	ldr.w	r3, [r5], #4
 800495c:	4798      	blx	r3
 800495e:	3601      	adds	r6, #1
 8004960:	e7ee      	b.n	8004940 <__libc_init_array+0xc>
 8004962:	f855 3b04 	ldr.w	r3, [r5], #4
 8004966:	4798      	blx	r3
 8004968:	3601      	adds	r6, #1
 800496a:	e7f2      	b.n	8004952 <__libc_init_array+0x1e>
 800496c:	080049b4 	.word	0x080049b4
 8004970:	080049b4 	.word	0x080049b4
 8004974:	080049b4 	.word	0x080049b4
 8004978:	080049b8 	.word	0x080049b8

0800497c <_init>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	bf00      	nop
 8004980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004982:	bc08      	pop	{r3}
 8004984:	469e      	mov	lr, r3
 8004986:	4770      	bx	lr

08004988 <_fini>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	bf00      	nop
 800498c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498e:	bc08      	pop	{r3}
 8004990:	469e      	mov	lr, r3
 8004992:	4770      	bx	lr
